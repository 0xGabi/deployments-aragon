{
  "address": "0x6A10a3012BFb0a59b01Aa9D1972b167103B04E22",
  "abi": [
    {
      "constant": false,
      "inputs": [
        {
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "newENS",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "ens",
          "type": "address"
        }
      ],
      "name": "DeployENS",
      "type": "event"
    }
  ],
  "transactionHash": "0x7978df8cdb531bf70281c2dc44b76af6ae6bae1bd3002ad7a4657f8afe5f09a9",
  "receipt": {
    "to": null,
    "from": "0x5b0F8D8f47E3fDF7eE1c337AbCA19dBba98524e6",
    "contractAddress": "0x6A10a3012BFb0a59b01Aa9D1972b167103B04E22",
    "transactionIndex": 0,
    "gasUsed": "14340267",
    "logsBloom": "0x
    "blockHash": "0xf44e81ca8ec8a07d3495a2fc0addf79225bb39d6b63a0316893c28922b1417bf",
    "transactionHash": "0x7978df8cdb531bf70281c2dc44b76af6ae6bae1bd3002ad7a4657f8afe5f09a9",
    "logs": [],
    "blockNumber": 695715,
    "cumulativeGasUsed": "140067",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "ff4c8d322a70f7dfdac93ed09c96ea16",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"newENS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"ens\",\"type\":\"address\"}],\"name\":\"DeployENS\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"newENS(address)\":{\"params\":{\"_owner\":\"Owner of .eth\"},\"return\":\"ENS\"}}},\"userdoc\":{\"methods\":{\"newENS(address)\":{\"notice\":\"Create a new ENS and set `_owner` as the owner of the top level domain.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/factory/ENSFactory.sol\":\"ENSFactory\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"contracts/ens/ENSConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ENSConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant ENS_ROOT = bytes32(0);\\n    bytes32 internal constant ETH_TLD_LABEL = keccak256(\\\"eth\\\");\\n    bytes32 internal constant ETH_TLD_NODE = keccak256(abi.encodePacked(ENS_ROOT, ETH_TLD_LABEL));\\n    bytes32 internal constant PUBLIC_RESOLVER_LABEL = keccak256(\\\"resolver\\\");\\n    bytes32 internal constant PUBLIC_RESOLVER_NODE = keccak256(abi.encodePacked(ETH_TLD_NODE, PUBLIC_RESOLVER_LABEL));\\n    */\\n    bytes32 internal constant ENS_ROOT = bytes32(0);\\n    bytes32 internal constant ETH_TLD_LABEL = 0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0;\\n    bytes32 internal constant ETH_TLD_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 internal constant PUBLIC_RESOLVER_LABEL = 0x329539a1d23af1810c48a07fe7fc66a3b34fbc8b37e9b3cdb97bb88ceab7e4bf;\\n    bytes32 internal constant PUBLIC_RESOLVER_NODE = 0xfdd5d5de6dd63db72bbc2d487944ba13bf775b50a80805fe6fcaba9b0fba88f5;\\n}\\n\",\"keccak256\":\"0xbe3fd8edef616224482756562d30b3ed7e19d39115f9a6ef5bb86c7ed9c7ea81\"},\"contracts/factory/ENSFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../lib/ens/ENS.sol\\\";\\nimport \\\"../lib/ens/PublicResolver.sol\\\";\\nimport \\\"../ens/ENSConstants.sol\\\";\\n\\n\\n// WARNING: This is an incredibly trustful ENS deployment, do NOT use in production!\\n// This contract is NOT meant to be deployed to a live network.\\n// Its only purpose is to easily create ENS instances for testing aragonPM.\\ncontract ENSFactory is ENSConstants {\\n    event DeployENS(address ens);\\n\\n    /**\\n    * @notice Create a new ENS and set `_owner` as the owner of the top level domain.\\n    * @param _owner Owner of .eth\\n    * @return ENS\\n    */\\n    function newENS(address _owner) public returns (ENS) {\\n        ENS ens = new ENS();\\n\\n        // Setup .eth TLD\\n        ens.setSubnodeOwner(ENS_ROOT, ETH_TLD_LABEL, this);\\n\\n        // Setup public resolver\\n        PublicResolver resolver = new PublicResolver(ens);\\n        ens.setSubnodeOwner(ETH_TLD_NODE, PUBLIC_RESOLVER_LABEL, this);\\n        ens.setResolver(PUBLIC_RESOLVER_NODE, resolver);\\n        resolver.setAddr(PUBLIC_RESOLVER_NODE, resolver);\\n\\n        ens.setOwner(ETH_TLD_NODE, _owner);\\n        ens.setOwner(ENS_ROOT, _owner);\\n\\n        emit DeployENS(ens);\\n\\n        return ens;\\n    }\\n}\\n\",\"keccak256\":\"0xe0e5a1884a83996f80804ae6ac23de1a217477ef2e2c3e54954d1bbcf52382c4\"},\"contracts/lib/ens/AbstractENS.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/AbstractENS.sol\\n\\npragma solidity ^0.4.15;\\n\\n\\ninterface AbstractENS {\\n    function owner(bytes32 _node) public constant returns (address);\\n    function resolver(bytes32 _node) public constant returns (address);\\n    function ttl(bytes32 _node) public constant returns (uint64);\\n    function setOwner(bytes32 _node, address _owner) public;\\n    function setSubnodeOwner(bytes32 _node, bytes32 label, address _owner) public;\\n    function setResolver(bytes32 _node, address _resolver) public;\\n    function setTTL(bytes32 _node, uint64 _ttl) public;\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed _node, bytes32 indexed _label, address _owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed _node, address _owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed _node, address _resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed _node, uint64 _ttl);\\n}\\n\",\"keccak256\":\"0x8deaa274dfc550c8251576dfa0dde1e58933728ced575de4f5b12391fd358c95\"},\"contracts/lib/ens/ENS.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/ENS.sol\\n\\npragma solidity ^0.4.0;\\n\\n\\nimport \\\"./AbstractENS.sol\\\";\\n\\n/**\\n * The ENS registry contract.\\n */\\ncontract ENS is AbstractENS {\\n    struct Record {\\n        address owner;\\n        address resolver;\\n        uint64 ttl;\\n    }\\n\\n    mapping(bytes32=>Record) records;\\n\\n    // Permits modifications only by the owner of the specified node.\\n    modifier only_owner(bytes32 node) {\\n        if (records[node].owner != msg.sender) throw;\\n        _;\\n    }\\n\\n    /**\\n     * Constructs a new ENS registrar.\\n     */\\n    function ENS() public {\\n        records[0].owner = msg.sender;\\n    }\\n\\n    /**\\n     * Returns the address that owns the specified node.\\n     */\\n    function owner(bytes32 node) public constant returns (address) {\\n        return records[node].owner;\\n    }\\n\\n    /**\\n     * Returns the address of the resolver for the specified node.\\n     */\\n    function resolver(bytes32 node) public constant returns (address) {\\n        return records[node].resolver;\\n    }\\n\\n    /**\\n     * Returns the TTL of a node, and any records associated with it.\\n     */\\n    function ttl(bytes32 node) public constant returns (uint64) {\\n        return records[node].ttl;\\n    }\\n\\n    /**\\n     * Transfers ownership of a node to a new address. May only be called by the current\\n     * owner of the node.\\n     * @param node The node to transfer ownership of.\\n     * @param owner The address of the new owner.\\n     */\\n    function setOwner(bytes32 node, address owner) only_owner(node) public {\\n        Transfer(node, owner);\\n        records[node].owner = owner;\\n    }\\n\\n    /**\\n     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be\\n     * called by the owner of the parent node.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param owner The address of the new owner.\\n     */\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) public {\\n        var subnode = keccak256(node, label);\\n        NewOwner(node, label, owner);\\n        records[subnode].owner = owner;\\n    }\\n\\n    /**\\n     * Sets the resolver address for the specified node.\\n     * @param node The node to update.\\n     * @param resolver The address of the resolver.\\n     */\\n    function setResolver(bytes32 node, address resolver) only_owner(node) public {\\n        NewResolver(node, resolver);\\n        records[node].resolver = resolver;\\n    }\\n\\n    /**\\n     * Sets the TTL for the specified node.\\n     * @param node The node to update.\\n     * @param ttl The TTL in seconds.\\n     */\\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) public {\\n        NewTTL(node, ttl);\\n        records[node].ttl = ttl;\\n    }\\n}\\n\",\"keccak256\":\"0x919b4beefbead7971bfe6a2a01025919d10091fd412b4e7ffaccc8661d7e2863\"},\"contracts/lib/ens/PublicResolver.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/PublicResolver.sol\\n\\npragma solidity ^0.4.0;\\n\\nimport \\\"./AbstractENS.sol\\\";\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver {\\n    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\\n    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\\n    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\\n    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\\n    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n    event AddrChanged(bytes32 indexed node, address a);\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n    event NameChanged(bytes32 indexed node, string name);\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n    struct PublicKey {\\n        bytes32 x;\\n        bytes32 y;\\n    }\\n\\n    struct Record {\\n        address addr;\\n        bytes32 content;\\n        string name;\\n        PublicKey pubkey;\\n        mapping(string=>string) text;\\n        mapping(uint256=>bytes) abis;\\n    }\\n\\n    AbstractENS ens;\\n    mapping(bytes32=>Record) records;\\n\\n    modifier only_owner(bytes32 node) {\\n        if (ens.owner(node) != msg.sender) throw;\\n        _;\\n    }\\n\\n    /**\\n     * Constructor.\\n     * @param ensAddr The ENS registrar contract.\\n     */\\n    function PublicResolver(AbstractENS ensAddr) public {\\n        ens = ensAddr;\\n    }\\n\\n    /**\\n     * Returns true if the resolver implements the interface specified by the provided hash.\\n     * @param interfaceID The ID of the interface to check for.\\n     * @return True if the contract implements the requested interface.\\n     */\\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n        return interfaceID == ADDR_INTERFACE_ID ||\\n               interfaceID == CONTENT_INTERFACE_ID ||\\n               interfaceID == NAME_INTERFACE_ID ||\\n               interfaceID == ABI_INTERFACE_ID ||\\n               interfaceID == PUBKEY_INTERFACE_ID ||\\n               interfaceID == TEXT_INTERFACE_ID ||\\n               interfaceID == INTERFACE_META_ID;\\n    }\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) public constant returns (address ret) {\\n        ret = records[node].addr;\\n    }\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param addr The address to set.\\n     */\\n    function setAddr(bytes32 node, address addr) only_owner(node) public {\\n        records[node].addr = addr;\\n        AddrChanged(node, addr);\\n    }\\n\\n    /**\\n     * Returns the content hash associated with an ENS node.\\n     * Note that this resource type is not standardized, and will likely change\\n     * in future to a resource type based on multihash.\\n     * @param node The ENS node to query.\\n     * @return The associated content hash.\\n     */\\n    function content(bytes32 node) public constant returns (bytes32 ret) {\\n        ret = records[node].content;\\n    }\\n\\n    /**\\n     * Sets the content hash associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * Note that this resource type is not standardized, and will likely change\\n     * in future to a resource type based on multihash.\\n     * @param node The node to update.\\n     * @param hash The content hash to set\\n     */\\n    function setContent(bytes32 node, bytes32 hash) only_owner(node) public {\\n        records[node].content = hash;\\n        ContentChanged(node, hash);\\n    }\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) public constant returns (string ret) {\\n        ret = records[node].name;\\n    }\\n\\n    /**\\n     * Sets the name associated with an ENS node, for reverse records.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param name The name to set.\\n     */\\n    function setName(bytes32 node, string name) only_owner(node) public {\\n        records[node].name = name;\\n        NameChanged(node, name);\\n    }\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) public constant returns (uint256 contentType, bytes data) {\\n        var record = records[node];\\n        for(contentType = 1; contentType <= contentTypes; contentType <<= 1) {\\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\\n                data = record.abis[contentType];\\n                return;\\n            }\\n        }\\n        contentType = 0;\\n    }\\n\\n    /**\\n     * Sets the ABI associated with an ENS node.\\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n     * the empty string.\\n     * @param node The node to update.\\n     * @param contentType The content type of the ABI\\n     * @param data The ABI data.\\n     */\\n    function setABI(bytes32 node, uint256 contentType, bytes data) only_owner(node) public {\\n        // Content types must be powers of 2\\n        if (((contentType - 1) & contentType) != 0) throw;\\n\\n        records[node].abis[contentType] = data;\\n        ABIChanged(node, contentType);\\n    }\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x, y the X and Y coordinates of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) public constant returns (bytes32 x, bytes32 y) {\\n        return (records[node].pubkey.x, records[node].pubkey.y);\\n    }\\n\\n    /**\\n     * Sets the SECP256k1 public key associated with an ENS node.\\n     * @param node The ENS node to query\\n     * @param x the X coordinate of the curve point for the public key.\\n     * @param y the Y coordinate of the curve point for the public key.\\n     */\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) only_owner(node) public {\\n        records[node].pubkey = PublicKey(x, y);\\n        PubkeyChanged(node, x, y);\\n    }\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string key) public constant returns (string ret) {\\n        ret = records[node].text[key];\\n    }\\n\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(bytes32 node, string key, string value) only_owner(node) public {\\n        records[node].text[key] = value;\\n        TextChanged(node, key, key);\\n    }\\n}\\n\",\"keccak256\":\"0x8c538f586fdf66528c5c6e2e916c79f00762a2fba3ec0e7be78dc0e3fda4ac2c\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "newENS(address)": {
        "params": {
          "_owner": "Owner of .eth"
        },
        "return": "ENS"
      }
    }
  },
  "userdoc": {
    "methods": {
      "newENS(address)": {
        "notice": "Create a new ENS and set `_owner` as the owner of the top level domain."
      }
    }
  }
}