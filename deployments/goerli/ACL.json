{
  "address": "0xe14186128ADE7a68007B110a03fd51E265CCa687",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "hasInitialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_app",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        }
      ],
      "name": "createBurnedPermission",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_app",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        }
      ],
      "name": "burnPermissionManager",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_entity",
          "type": "address"
        },
        {
          "name": "_app",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        }
      ],
      "name": "grantPermission",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_entity",
          "type": "address"
        },
        {
          "name": "_app",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        }
      ],
      "name": "getPermissionParamsLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_paramsHash",
          "type": "bytes32"
        },
        {
          "name": "_who",
          "type": "address"
        },
        {
          "name": "_where",
          "type": "address"
        },
        {
          "name": "_what",
          "type": "bytes32"
        },
        {
          "name": "_how",
          "type": "uint256[]"
        }
      ],
      "name": "evalParams",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "NO_PERMISSION",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_script",
          "type": "bytes"
        }
      ],
      "name": "getEVMScriptExecutor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRecoveryVault",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CREATE_PERMISSIONS_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_entity",
          "type": "address"
        },
        {
          "name": "_app",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_params",
          "type": "uint256[]"
        }
      ],
      "name": "grantPermissionP",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_who",
          "type": "address"
        },
        {
          "name": "_where",
          "type": "address"
        },
        {
          "name": "_what",
          "type": "bytes32"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "token",
          "type": "address"
        }
      ],
      "name": "allowRecoverability",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getInitializationBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_entity",
          "type": "address"
        },
        {
          "name": "_app",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        }
      ],
      "name": "revokePermission",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "transferToVault",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_entity",
          "type": "address"
        },
        {
          "name": "_app",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "getPermissionParam",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        },
        {
          "name": "",
          "type": "uint8"
        },
        {
          "name": "",
          "type": "uint240"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_params",
          "type": "uint256[]"
        }
      ],
      "name": "canPerform",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEVMScriptRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ANY_ENTITY",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_app",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        }
      ],
      "name": "removePermissionManager",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newManager",
          "type": "address"
        },
        {
          "name": "_app",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        }
      ],
      "name": "setPermissionManager",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_app",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        }
      ],
      "name": "getPermissionManager",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_entity",
          "type": "address"
        },
        {
          "name": "_app",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_manager",
          "type": "address"
        }
      ],
      "name": "createPermission",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_permissionsCreator",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "EMPTY_PARAM_HASH",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isPetrified",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "BURN_ENTITY",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_who",
          "type": "address"
        },
        {
          "name": "_where",
          "type": "address"
        },
        {
          "name": "_what",
          "type": "bytes32"
        },
        {
          "name": "_how",
          "type": "uint256[]"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_who",
          "type": "address"
        },
        {
          "name": "_where",
          "type": "address"
        },
        {
          "name": "_what",
          "type": "bytes32"
        },
        {
          "name": "_how",
          "type": "bytes"
        }
      ],
      "name": "hasPermission",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "entity",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "app",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "allowed",
          "type": "bool"
        }
      ],
      "name": "SetPermission",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "entity",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "app",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "paramsHash",
          "type": "bytes32"
        }
      ],
      "name": "SetPermissionParams",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "app",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "name": "manager",
          "type": "address"
        }
      ],
      "name": "ChangePermissionManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "script",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "input",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ScriptResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToVault",
      "type": "event"
    }
  ],
  "transactionHash": "0xbec463b2c7ed1c614a78db0a8a0c007bfd083b6ef0185431d5e721114f4e4ea4",
  "receipt": {
    "to": null,
    "from": "0x553114cF6E727eeE015e0dc2E8C91b08C428a629",
    "contractAddress": "0xe14186128ADE7a68007B110a03fd51E265CCa687",
    "transactionIndex": 40,
    "gasUsed": "2395249",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x5605e493b438a3694f4261500a7b9e7f06e40a4d76129f8a514a3da7ac43bf6f",
    "transactionHash": "0xbec463b2c7ed1c614a78db0a8a0c007bfd083b6ef0185431d5e721114f4e4ea4",
    "logs": [],
    "blockNumber": 7929345,
    "cumulativeGasUsed": "7491074",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "78a2f2e46eb54fbd65e9a3b2074936eb",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"createBurnedPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"burnPermissionManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"grantPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"getPermissionParamsLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_paramsHash\",\"type\":\"bytes32\"},{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_where\",\"type\":\"address\"},{\"name\":\"_what\",\"type\":\"bytes32\"},{\"name\":\"_how\",\"type\":\"uint256[]\"}],\"name\":\"evalParams\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"NO_PERMISSION\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CREATE_PERMISSIONS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"grantPermissionP\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_where\",\"type\":\"address\"},{\"name\":\"_what\",\"type\":\"bytes32\"}],\"name\":\"hasPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"revokePermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getPermissionParam\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint8\"},{\"name\":\"\",\"type\":\"uint240\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ANY_ENTITY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"removePermissionManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newManager\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"setPermissionManager\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"}],\"name\":\"getPermissionManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_entity\",\"type\":\"address\"},{\"name\":\"_app\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_manager\",\"type\":\"address\"}],\"name\":\"createPermission\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_permissionsCreator\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EMPTY_PARAM_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ENTITY\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_where\",\"type\":\"address\"},{\"name\":\"_what\",\"type\":\"bytes32\"},{\"name\":\"_how\",\"type\":\"uint256[]\"}],\"name\":\"hasPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_who\",\"type\":\"address\"},{\"name\":\"_where\",\"type\":\"address\"},{\"name\":\"_what\",\"type\":\"bytes32\"},{\"name\":\"_how\",\"type\":\"bytes\"}],\"name\":\"hasPermission\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"app\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"allowed\",\"type\":\"bool\"}],\"name\":\"SetPermission\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"entity\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"app\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"paramsHash\",\"type\":\"bytes32\"}],\"name\":\"SetPermissionParams\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"app\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"name\":\"manager\",\"type\":\"address\"}],\"name\":\"ChangePermissionManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowRecoverability(address)\":{\"details\":\"By default deriving from AragonApp makes it recoverable\",\"params\":{\"token\":\"Token address that would be recovered\"},\"return\":\"bool whether the app allows the recovery\"},\"burnPermissionManager(address,bytes32)\":{\"params\":{\"_app\":\"Address of the app in which the permission is being burned\",\"_role\":\"Identifier for the group of actions being burned\"}},\"canPerform(address,bytes32,uint256[])\":{\"details\":\"Check whether an action can be performed by a sender for a particular role on this app\",\"params\":{\"_params\":\"Permission params for the role\",\"_role\":\"Role on this app\",\"_sender\":\"Sender of the call\"},\"return\":\"Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet.\"},\"createBurnedPermission(address,bytes32)\":{\"params\":{\"_app\":\"Address of the app in which the permission is being burned\",\"_role\":\"Identifier for the group of actions being burned\"}},\"createPermission(address,address,bytes32,address)\":{\"details\":\"Creates a permission that wasn't previously set and managed.     If a created permission is removed it is possible to reset it with createPermission.     This is the **ONLY** way to create permissions and set managers to permissions that don't     have a manager.     In terms of the ACL being initialized, this function implicitly protects all the other     state-changing external functions, as they all require the sender to be a manager.\",\"params\":{\"_app\":\"Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\",\"_entity\":\"Address of the whitelisted entity that will be able to perform the role\",\"_manager\":\"Address of the entity that will be able to grant and revoke the permission further.\",\"_role\":\"Identifier for the group of actions in app given access to perform\"}},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getPermissionManager(address,bytes32)\":{\"details\":\"Get manager for permission\",\"params\":{\"_app\":\"Address of the app\",\"_role\":\"Identifier for a group of actions in app\"},\"return\":\"address of the manager for the permission\"},\"getPermissionParam(address,address,bytes32,uint256)\":{\"params\":{\"_app\":\"Address of the app\",\"_entity\":\"Address of the whitelisted entity that will be able to perform the role\",\"_index\":\"Index of parameter in the array\",\"_role\":\"Identifier for a group of actions in app\"},\"return\":\"Parameter (id, op, value)\"},\"getPermissionParamsLength(address,address,bytes32)\":{\"params\":{\"_app\":\"Address of the app\",\"_entity\":\"Address of the whitelisted entity that will be able to perform the role\",\"_role\":\"Identifier for a group of actions in app\"},\"return\":\"Length of the array\"},\"getRecoveryVault()\":{\"details\":\"Get the recovery vault for the app\",\"return\":\"Recovery vault address for the app\"},\"grantPermission(address,address,bytes32)\":{\"details\":\"Grants permission if allowed. This requires `msg.sender` to be the permission manager\",\"params\":{\"_app\":\"Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\",\"_entity\":\"Address of the whitelisted entity that will be able to perform the role\",\"_role\":\"Identifier for the group of actions in app given access to perform\"}},\"grantPermissionP(address,address,bytes32,uint256[])\":{\"details\":\"Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\",\"params\":{\"_app\":\"Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\",\"_entity\":\"Address of the whitelisted entity that will be able to perform the role\",\"_params\":\"Permission parameters\",\"_role\":\"Identifier for the group of actions in app given access to perform\"}},\"hasInitialized()\":{\"return\":\"Whether the contract has been initialized by the time of the current block\"},\"hasPermission(address,address,bytes32,bytes)\":{\"details\":\"Function called by apps to check ACL on kernel or to check permission statu\",\"params\":{\"_how\":\"Permission parameters\",\"_where\":\"Identifier for a group of actions in app\",\"_who\":\"Sender of the original call\"},\"return\":\"boolean indicating whether the ACL allows the role or not\"},\"initialize(address)\":{\"details\":\"Initialize can only be called once. It saves the block number in which it was initialized.\",\"params\":{\"_permissionsCreator\":\"Entity that will be given permission over createPermission\"}},\"removePermissionManager(address,bytes32)\":{\"params\":{\"_app\":\"Address of the app in which the permission is being unmanaged\",\"_role\":\"Identifier for the group of actions being unmanaged\"}},\"revokePermission(address,address,bytes32)\":{\"details\":\"Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\",\"params\":{\"_app\":\"Address of the app in which the role will be revoked\",\"_entity\":\"Address of the whitelisted entity to revoke access from\",\"_role\":\"Identifier for the group of actions in app being revoked\"}},\"setPermissionManager(address,address,bytes32)\":{\"params\":{\"_app\":\"Address of the app in which the permission management is being transferred\",\"_newManager\":\"Address for the new manager\",\"_role\":\"Identifier for the group of actions being transferred\"}},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}}}},\"userdoc\":{\"methods\":{\"burnPermissionManager(address,bytes32)\":{\"notice\":\"Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\"},\"createBurnedPermission(address,bytes32)\":{\"notice\":\"Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\"},\"createPermission(address,address,bytes32,address)\":{\"notice\":\"Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\"},\"getPermissionParam(address,address,bytes32,uint256)\":{\"notice\":\"Get parameter for permission\"},\"getPermissionParamsLength(address,address,bytes32)\":{\"notice\":\"Get parameters for permission array length\"},\"grantPermission(address,address,bytes32)\":{\"notice\":\"Grant `_entity` the ability to perform actions requiring `_role` on `_app`\"},\"grantPermissionP(address,address,bytes32,uint256[])\":{\"notice\":\"Grant `_entity` the ability to perform actions requiring `_role` on `_app`\"},\"initialize(address)\":{\"notice\":\"Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\"},\"removePermissionManager(address,bytes32)\":{\"notice\":\"Remove the manager of `_role` in `_app`\"},\"revokePermission(address,address,bytes32)\":{\"notice\":\"Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\"},\"setPermissionManager(address,address,bytes32)\":{\"notice\":\"Set `_newManager` as the manager of `_role` in `_app`\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/acl/ACL.sol\":\"ACL\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/acl/ACL.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/TimeHelpers.sol\\\";\\nimport \\\"./ACLSyntaxSugar.sol\\\";\\nimport \\\"./IACL.sol\\\";\\nimport \\\"./IACLOracle.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract ACL is IACL, TimeHelpers, AragonApp, ACLHelpers {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = keccak256(\\\"CREATE_PERMISSIONS_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;\\n\\n    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, RET, NOT, AND, OR, XOR, IF_ELSE } // op types\\n\\n    struct Param {\\n        uint8 id;\\n        uint8 op;\\n        uint240 value; // even though value is an uint240 it can store addresses\\n        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\\n        // op and id take less than 1 byte each so it can be kept in 1 sstore\\n    }\\n\\n    uint8 internal constant BLOCK_NUMBER_PARAM_ID = 200;\\n    uint8 internal constant TIMESTAMP_PARAM_ID    = 201;\\n    // 202 is unused\\n    uint8 internal constant ORACLE_PARAM_ID       = 203;\\n    uint8 internal constant LOGIC_OP_PARAM_ID     = 204;\\n    uint8 internal constant PARAM_VALUE_PARAM_ID  = 205;\\n    // TODO: Add execution times param type?\\n\\n    /* Hardcoded constant to save gas\\n    bytes32 public constant EMPTY_PARAM_HASH = keccak256(uint256(0));\\n    */\\n    bytes32 public constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\\n    bytes32 public constant NO_PERMISSION = bytes32(0);\\n    address public constant ANY_ENTITY = address(-1);\\n    address public constant BURN_ENTITY = address(1); // address(0) is already used as \\\"no permission manager\\\"\\n\\n    string private constant ERROR_AUTH_INIT_KERNEL = \\\"ACL_AUTH_INIT_KERNEL\\\";\\n    string private constant ERROR_AUTH_NO_MANAGER = \\\"ACL_AUTH_NO_MANAGER\\\";\\n    string private constant ERROR_EXISTENT_MANAGER = \\\"ACL_EXISTENT_MANAGER\\\";\\n\\n    // Whether someone has a permission\\n    mapping (bytes32 => bytes32) internal permissions; // permissions hash => params hash\\n    mapping (bytes32 => Param[]) internal permissionParams; // params hash => params\\n\\n    // Who is the manager of a permission\\n    mapping (bytes32 => address) internal permissionManager;\\n\\n    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\\n    event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);\\n    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\\n\\n    modifier onlyPermissionManager(address _app, bytes32 _role) {\\n        require(msg.sender == getPermissionManager(_app, _role), ERROR_AUTH_NO_MANAGER);\\n        _;\\n    }\\n\\n    modifier noPermissionManager(address _app, bytes32 _role) {\\n        // only allow permission creation (or re-creation) when there is no manager\\n        require(getPermissionManager(_app, _role) == address(0), ERROR_EXISTENT_MANAGER);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(address _permissionsCreator) public onlyInit {\\n        initialized();\\n        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\\n\\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\\n    }\\n\\n    /**\\n    * @dev Creates a permission that wasn't previously set and managed.\\n    *      If a created permission is removed it is possible to reset it with createPermission.\\n    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\\n    *      have a manager.\\n    *      In terms of the ACL being initialized, this function implicitly protects all the other\\n    *      state-changing external functions, as they all require the sender to be a manager.\\n    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\\n    */\\n    function createPermission(address _entity, address _app, bytes32 _role, address _manager)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _createPermission(_entity, _app, _role, _manager);\\n    }\\n\\n    /**\\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    */\\n    function grantPermission(address _entity, address _app, bytes32 _role)\\n        external\\n    {\\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\\n    }\\n\\n    /**\\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _params Permission parameters\\n    */\\n    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\\n        public\\n        onlyPermissionManager(_app, _role)\\n    {\\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\\n        _setPermission(_entity, _app, _role, paramsHash);\\n    }\\n\\n    /**\\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\\n    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity to revoke access from\\n    * @param _app Address of the app in which the role will be revoked\\n    * @param _role Identifier for the group of actions in app being revoked\\n    */\\n    function revokePermission(address _entity, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermission(_entity, _app, _role, NO_PERMISSION);\\n    }\\n\\n    /**\\n    * @notice Set `_newManager` as the manager of `_role` in `_app`\\n    * @param _newManager Address for the new manager\\n    * @param _app Address of the app in which the permission management is being transferred\\n    * @param _role Identifier for the group of actions being transferred\\n    */\\n    function setPermissionManager(address _newManager, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(_newManager, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Remove the manager of `_role` in `_app`\\n    * @param _app Address of the app in which the permission is being unmanaged\\n    * @param _role Identifier for the group of actions being unmanaged\\n    */\\n    function removePermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(address(0), _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function createBurnedPermission(address _app, bytes32 _role)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function burnPermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n     * @notice Get parameters for permission array length\\n     * @param _entity Address of the whitelisted entity that will be able to perform the role\\n     * @param _app Address of the app\\n     * @param _role Identifier for a group of actions in app\\n     * @return Length of the array\\n     */\\n    function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\\n        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\\n    }\\n\\n    /**\\n    * @notice Get parameter for permission\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @param _index Index of parameter in the array\\n    * @return Parameter (id, op, value)\\n    */\\n    function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\\n        external\\n        view\\n        returns (uint8, uint8, uint240)\\n    {\\n        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\\n        return (param.id, param.op, param.value);\\n    }\\n\\n    /**\\n    * @dev Get manager for permission\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @return address of the manager for the permission\\n    */\\n    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\\n        return permissionManager[roleHash(_app, _role)];\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission statu\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _where Identifier for a group of actions in app\\n    * @param _how Permission parameters\\n    * @return boolean indicating whether the ACL allows the role or not\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\\n        return hasPermission(_who, _where, _what, ConversionHelpers.dangerouslyCastBytesToUintArray(_how));\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\\n        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\\n        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\\n        uint256[] memory empty = new uint256[](0);\\n        return hasPermission(_who, _where, _what, empty);\\n    }\\n\\n    function evalParams(\\n        bytes32 _paramsHash,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) public view returns (bool)\\n    {\\n        if (_paramsHash == EMPTY_PARAM_HASH) {\\n            return true;\\n        }\\n\\n        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\\n    }\\n\\n    /**\\n    * @dev Internal createPermission for access inside the kernel (on instantiation)\\n    */\\n    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\\n        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\\n        _setPermissionManager(_manager, _app, _role);\\n    }\\n\\n    /**\\n    * @dev Internal function called to actually save the permission\\n    */\\n    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\\n        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\\n        bool entityHasPermission = _paramsHash != NO_PERMISSION;\\n        bool permissionHasParams = entityHasPermission && _paramsHash != EMPTY_PARAM_HASH;\\n\\n        emit SetPermission(_entity, _app, _role, entityHasPermission);\\n        if (permissionHasParams) {\\n            emit SetPermissionParams(_entity, _app, _role, _paramsHash);\\n        }\\n    }\\n\\n    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\\n        bytes32 paramHash = keccak256(abi.encodePacked(_encodedParams));\\n        Param[] storage params = permissionParams[paramHash];\\n\\n        if (params.length == 0) { // params not saved before\\n            for (uint256 i = 0; i < _encodedParams.length; i++) {\\n                uint256 encodedParam = _encodedParams[i];\\n                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\\n                params.push(param);\\n            }\\n        }\\n\\n        return paramHash;\\n    }\\n\\n    function _evalParam(\\n        bytes32 _paramsHash,\\n        uint32 _paramId,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) internal view returns (bool)\\n    {\\n        if (_paramId >= permissionParams[_paramsHash].length) {\\n            return false; // out of bounds\\n        }\\n\\n        Param memory param = permissionParams[_paramsHash][_paramId];\\n\\n        if (param.id == LOGIC_OP_PARAM_ID) {\\n            return _evalLogic(param, _paramsHash, _who, _where, _what, _how);\\n        }\\n\\n        uint256 value;\\n        uint256 comparedTo = uint256(param.value);\\n\\n        // get value\\n        if (param.id == ORACLE_PARAM_ID) {\\n            value = checkOracle(IACLOracle(param.value), _who, _where, _what, _how) ? 1 : 0;\\n            comparedTo = 1;\\n        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\\n            value = getBlockNumber();\\n        } else if (param.id == TIMESTAMP_PARAM_ID) {\\n            value = getTimestamp();\\n        } else if (param.id == PARAM_VALUE_PARAM_ID) {\\n            value = uint256(param.value);\\n        } else {\\n            if (param.id >= _how.length) {\\n                return false;\\n            }\\n            value = uint256(uint240(_how[param.id])); // force lost precision\\n        }\\n\\n        if (Op(param.op) == Op.RET) {\\n            return uint256(value) > 0;\\n        }\\n\\n        return compare(value, Op(param.op), comparedTo);\\n    }\\n\\n    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (Op(_param.op) == Op.IF_ELSE) {\\n            uint32 conditionParam;\\n            uint32 successParam;\\n            uint32 failureParam;\\n\\n            (conditionParam, successParam, failureParam) = decodeParamsList(uint256(_param.value));\\n            bool result = _evalParam(_paramsHash, conditionParam, _who, _where, _what, _how);\\n\\n            return _evalParam(_paramsHash, result ? successParam : failureParam, _who, _where, _what, _how);\\n        }\\n\\n        uint32 param1;\\n        uint32 param2;\\n\\n        (param1, param2,) = decodeParamsList(uint256(_param.value));\\n        bool r1 = _evalParam(_paramsHash, param1, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.NOT) {\\n            return !r1;\\n        }\\n\\n        if (r1 && Op(_param.op) == Op.OR) {\\n            return true;\\n        }\\n\\n        if (!r1 && Op(_param.op) == Op.AND) {\\n            return false;\\n        }\\n\\n        bool r2 = _evalParam(_paramsHash, param2, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.XOR) {\\n            return r1 != r2;\\n        }\\n\\n        return r2; // both or and and depend on result of r2 after checks\\n    }\\n\\n    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\\n        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\\n        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\\n        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\\n        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\\n        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\\n        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\\n        return false;\\n    }\\n\\n    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\\n        bytes4 sig = _oracleAddr.canPerform.selector;\\n\\n        // a raw call is required so we can return false if the call reverts, rather than reverting\\n        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\\n\\n        bool ok;\\n        assembly {\\n            // send all available gas; if the oracle eats up all the gas, we will eventually revert\\n            // note that we are currently guaranteed to still have some gas after the call from\\n            // EIP-150's 63/64 gas forward rule\\n            ok := staticcall(gas, _oracleAddr, add(checkCalldata, 0x20), mload(checkCalldata), 0, 0)\\n        }\\n\\n        if (!ok) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := returndatasize }\\n        if (size != 32) {\\n            return false;\\n        }\\n\\n        bool result;\\n        assembly {\\n            let ptr := mload(0x40)       // get next free memory ptr\\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\\n            result := mload(ptr)         // read data at ptr and set it to result\\n            mstore(ptr, 0)               // set pointer memory to 0 so it still is the next free ptr\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n    * @dev Internal function that sets management\\n    */\\n    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\\n        permissionManager[roleHash(_app, _role)] = _newManager;\\n        emit ChangePermissionManager(_app, _role, _newManager);\\n    }\\n\\n    function roleHash(address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"ROLE\\\", _where, _what));\\n    }\\n\\n    function permissionHash(address _who, address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _what));\\n    }\\n}\\n\",\"keccak256\":\"0x1c850377b65614983bda130233257eab46f6de300d33c585c3c90af962fb535f\"},\"contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x672a96975fc17f66905e775645cc93249426ce9601aef597a13d1e449c7f89d0\"},\"contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0x7e081f42891bbcc8fa9f3a67efb34ecafa8e2c075e37a01d74d221c45ddfdd10\"},\"contracts/acl/IACLOracle.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACLOracle {\\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x76b78ed68eafa0e3c9a4a9e4151f136f13dbcca0ac65cc43501db7b6a1189867\"},\"contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0x37324058906601970b1ef5cbe8f2af93144d3b723c2a33e468142cdc753c829b\"},\"contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n}\\n\",\"keccak256\":\"0x342fa7437cb3e80ea702209cc90787b27d21a7d4bf101e313534c9da2a2f7875\"},\"contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x42f0422744e13674e38bfbef079af7150883aba96ddbe61c5ae50df31d42696e\"},\"contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0x6b2fa091968161075154a77fa741a3484c891d73cd3cd14ede502ff56dd08dfc\"},\"contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa8e004decf086e817a864b485473b687c2c468c82af7b5011d9908586f7cbf36\"},\"contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc859366d3143499d1458ea55cb5374ae1ca1faf41763cad5e051dea2da373ba1\"},\"contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9dd99d770a5eed901ba749e1f02e4fae443e71e899f4909f56825dfc378da089\"},\"contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0x797d3a58b782032f6afc51725326c0b51dceb00f3af6b85b25bd91cc10d22504\"},\"contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0xd89653c118bbd8cace423c45daa37986c566672198a415254011c028d1831189\"},\"contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd251a1207e1faa4c41500bf927310bb739b1fbc0bf880f236f8e0a9236d6a03a\"},\"contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0xfaba85207f0bb4bb5d7b6685a963c39a3258641bda6e523175640c3f9aeb2045\"},\"contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe497dcb85bbbf10224623247f39a4aeed7d3b230de2a811f3b69cb0e7d0a64d4\"},\"contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xea4ded621a63f988b83ac27b4a23cad0a42c3d77bcf6ca7b88681ae4ea650cf4\"},\"contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xf8b4ccf7ee558224c155604a4a0b5cc35715367cda5010fb38e21d63ec5236c9\"},\"contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x76ad18a278e36e14147f5b58a1157de67ce95f28813f3e1eacfedaaf53dd33b9\"},\"contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x66b255ac1537765d6e79cc0ed02df004e7bf214863773901e207baafd59dc2ce\"},\"contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0x96e9fd607b156a96905ec0108bb4fbcc5ad85212bb98e03600069bb5727d2daa\"},\"contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x817f66cfc7bfafd19a4e6b1344850c5f7b72e39a1073fe862efebe608a07c0d3\"},\"contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"}},\"version\":1}",
  "bytecode": "0x6080604052620000176401000000006200001d810204565b6200023b565b6200003064010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156200010c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d0578181015183820152602001620000b6565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200012360001964010000000062000154810204565b565b60006200014f60008051602062002c3a833981519152640100000000620020556200023382021704565b905090565b6200016764010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620000d0578181015183820152602001620000b6565b506200023060008051602062002c3a83398151915282640100000000620029666200023782021704565b50565b5490565b9055565b6129ef806200024b6000396000f3006080604052600436106101955763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630803fac0811461019a5780630808343e146101c357806309699ff5146101e95780630a8ed3db1461020d57806315949ed7146102375780631b5e75be146102735780631d63ff2b146102e85780632914b9bd146102fd57806332f0a3b5146103725780633d6ab68f146103875780636815c9921461039c5780636d6712d8146104105780637e7db6e11461043a57806380afdea81461045b5780638b3dd749146104705780639d0effdb146104855780639d4941d8146104af578063a03c5832146104d0578063a1658fad14610541578063a479e508146105a8578063a5ed8bf8146105bd578063a885508a146105d2578063afd925df146105f6578063b190572714610620578063be03847814610644578063c4d66de814610675578063c513f66e14610696578063d4aae0c4146106ab578063de4796ed146106c0578063f516bc0e146106d5578063f520b58d146106ea578063fdef91061461075e575b600080fd5b3480156101a657600080fd5b506101af6107cd565b604080519115158252519081900360200190f35b3480156101cf57600080fd5b506101e7600160a060020a03600435166024356107f6565b005b3480156101f557600080fd5b506101e7600160a060020a03600435166024356109b9565b34801561021957600080fd5b506101e7600160a060020a0360043581169060243516604435610a6c565b34801561024357600080fd5b50610261600160a060020a0360043581169060243516604435610aa8565b60408051918252519081900360200190f35b34801561027f57600080fd5b5060408051602060046084358181013583810280860185019096528085526101af9583359560248035600160a060020a039081169760443590911696606435963696919560a495949091019282919085019084908082843750949750610aea9650505050505050565b3480156102f457600080fd5b50610261610b37565b34801561030957600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610356943694929360249392840191908190840183828082843750949750610b3c9650505050505050565b60408051600160a060020a039092168252519081900360200190f35b34801561037e57600080fd5b50610356610c3b565b34801561039357600080fd5b50610261610ccc565b3480156103a857600080fd5b5060408051606435600481810135602081810285810182019096528185526101e795600160a060020a0384358116966024803590921696604435963696909560849593949290920192909182919085019084908082843750949750610cf09650505050505050565b34801561041c57600080fd5b506101af600160a060020a0360043581169060243516604435610de2565b34801561044657600080fd5b506101af600160a060020a0360043516610e09565b34801561046757600080fd5b50610261610e0f565b34801561047c57600080fd5b50610261610e3f565b34801561049157600080fd5b506101e7600160a060020a0360043581169060243516604435610e6a565b3480156104bb57600080fd5b506101e7600160a060020a0360043516610f18565b3480156104dc57600080fd5b506104fd600160a060020a03600435811690602435166044356064356111b6565b6040805160ff94851681529290931660208301527dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff168183015290519081900360600190f35b34801561054d57600080fd5b5060408051602060046044358181013583810280860185019096528085526101af958335600160a060020a031695602480359636969560649593949201929182918501908490808284375094975061124b9650505050505050565b3480156105b457600080fd5b506103566113b2565b3480156105c957600080fd5b50610356611467565b3480156105de57600080fd5b506101e7600160a060020a036004351660243561146d565b34801561060257600080fd5b506101e7600160a060020a036004358116906024351660443561151a565b34801561062c57600080fd5b50610356600160a060020a03600435166024356115c6565b34801561065057600080fd5b506101e7600160a060020a0360043581169060243581169060443590606435166115f7565b34801561068157600080fd5b506101e7600160a060020a0360043516611775565b3480156106a257600080fd5b506102616118dc565b3480156106b757600080fd5b50610356611900565b3480156106cc57600080fd5b506101af61192b565b3480156106e157600080fd5b5061035661193e565b3480156106f657600080fd5b5060408051606435600481810135602081810285810182019096528185526101af95600160a060020a03843581169660248035909216966044359636969095608495939492909201929091829190850190849080828437509497506119439650505050505050565b34801561076a57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101af94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506119e79650505050505050565b6000806107d8610e3f565b905080158015906107f05750806107ed6119fd565b10155b91505090565b604080516000808252602082019092527f0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a916108389133918491905b5061124b565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156108ff576040516000805160206129a483398151915281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108c45781810151838201526020016108ac565b50505050905090810190601f1680156108f15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508282600061090e83836115c6565b600160a060020a0316146040805190810160405280601481526020017f41434c5f4558495354454e545f4d414e414745520000000000000000000000008152509015156109a5576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506109b260018686611a01565b5050505050565b81816109c582826115c6565b60408051808201909152601381527f41434c5f415554485f4e4f5f4d414e4147455200000000000000000000000000602082015290600160a060020a03163314610a59576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50610a6660018585611a01565b50505050565b610aa38383836000604051908082528060200260200182016040528015610a9d578160200160208202803883390190505b50610cf0565b505050565b600060016000806000610abc888888611a8b565b81526020808201929092526040908101600090812054845291830193909352910190205490505b9392505050565b60007f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563861415610b1c57506001610b2e565b610b2b86600087878787611b5f565b90505b95945050505050565b600081565b6000610b466113b2565b600160a060020a03166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bbd578181015183820152602001610ba5565b50505050905090810190601f168015610bea5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610c0957600080fd5b505af1158015610c1d573d6000803e3d6000fd5b505050506040513d6020811015610c3357600080fd5b505192915050565b6000610c45611900565b600160a060020a03166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050506040513d6020811015610cc557600080fd5b5051905090565b7f0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a81565b60008383610cfe82826115c6565b60408051808201909152601381527f41434c5f415554485f4e4f5f4d414e4147455200000000000000000000000000602082015290600160a060020a03163314610d92576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506000845111610dc2577f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563610dcb565b610dcb84611da8565b9250610dd987878786611f61565b50505050505050565b60408051600080825260208201909252610dfe85858584611943565b91505b509392505050565b50600190565b6000610e3a7fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b612055565b905090565b6000610e3a7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e612055565b8181610e7682826115c6565b60408051808201909152601381527f41434c5f415554485f4e4f5f4d414e4147455200000000000000000000000000602082015290600160a060020a03163314610f0a576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506109b28585856000611f61565b6000806000610f2684610e09565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515610fb1576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50610fba610c3b565b9250610fc58361205d565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e54524143540000000000006020820152901515611050576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50600160a060020a03841615156110a15760405130319250600160a060020a0384169083156108fc029084906000818181858888f1935050505015801561109b573d6000803e3d6000fd5b50611165565b50826110bc600160a060020a0382163063ffffffff61208a16565b91506110d8600160a060020a038216848463ffffffff6121a416565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611163576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b505b83600160a060020a031683600160a060020a03167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b600080600080600160008060006111ce8c8c8c611a8b565b81526020808201929092526040908101600090812054845291830193909352910190208054869081106111fd57fe5b60009182526020909120015460ff8082169a61010083049091169950620100009091047dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16975095505050505050565b6000806112566107cd565b15156112655760009150610e01565b61126d611900565b9050600160a060020a03811615156112885760009150610e01565b80600160a060020a031663fdef91068630876112a388612226565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff8716028152600160a060020a03808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b8381101561132e578181015183820152602001611316565b50505050905090810190601f16801561135b5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561137d57600080fd5b505af1158015611391573d6000803e3d6000fd5b505050506040513d60208110156113a757600080fd5b505195945050505050565b6000806113bd611900565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6160248201529051600160a060020a03929092169163be00bbd8916044808201926020929091908290030181600087803b158015610c0957600080fd5b60001981565b818161147982826115c6565b60408051808201909152601381527f41434c5f415554485f4e4f5f4d414e4147455200000000000000000000000000602082015290600160a060020a0316331461150d576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50610a6660008585611a01565b818161152682826115c6565b60408051808201909152601381527f41434c5f415554485f4e4f5f4d414e4147455200000000000000000000000000602082015290600160a060020a031633146115ba576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506109b2858585611a01565b6000600260006115d68585612230565b8152602081019190915260400160002054600160a060020a03169392505050565b604080516000808252602082019092527f0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a91611637913391849190610832565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156116c2576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50838360006116d183836115c6565b600160a060020a0316146040805190810160405280601481526020017f41434c5f4558495354454e545f4d414e41474552000000000000000000000000815250901515611768576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50610dd9878787876122f9565b61177d610e3f565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015611807576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50611810612330565b611818611900565b60408051808201909152601481527f41434c5f415554485f494e49545f4b45524e454c000000000000000000000000602082015290600160a060020a031633146118ac576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506118d981307f0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a826122f9565b50565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381565b6000610e3a7f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b612055565b6000600019611938610e3f565b14905090565b600181565b6000806000806000611956898989611a8b565b81526020810191909152604001600020549150811580159061198057506119808288888888610aea565b1561198e57600192506119dd565b60008061199e6000198989611a8b565b8152602081019190915260400160002054905080158015906119ca57506119ca81600019888888610aea565b156119d857600192506119dd565b600092505b5050949350505050565b6000610b2e8585856119f8866123fd565b611943565b4390565b8260026000611a108585612230565b815260208101919091526040908101600090812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016600160a060020a039485161790559051858316928492908616917ff3addc8b8e25ee11528a61b0e65092cae0666ef0ec0c64cb303993c88d689b4d9190a4505050565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526c01000000000000000000000000600160a060020a038088168202602a850152861602603e8301526052808301859052835180840390910181526072909201928390528151600093918291908401908083835b60208310611b2b5780518252601f199092019160209182019101611b0c565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120979650505050505050565b6000611b69612983565b600088815260016020526040812054819063ffffffff8a1610611b8f5760009350611d9b565b60008a8152600160205260409020805463ffffffff8b16908110611baf57fe5b600091825260209182902060408051606081018252929091015460ff8082168085526101008304909116948401949094526201000090047dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690820152935060cc1415611c2957611c22838b8a8a8a8a6124ac565b9350611d9b565b50604082015182517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091169060ff1660cb1415611c8c57611c7083604001518989898961267f565b611c7b576000611c7e565b60015b60ff16915060019050611d4a565b825160ff1660c81415611ca857611ca16119fd565b9150611d4a565b825160ff1660c91415611cbd57611ca16127db565b825160ff1660cd1415611cf65782604001517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff169150611d4a565b8451835160ff1610611d0b5760009350611d9b565b82518551869160ff16908110611d1d57fe5b906020019060200201517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1691505b6007836020015160ff16600c811115611d5f57fe5b600c811115611d6a57fe5b1415611d7b57600082119350611d9b565b611d9882846020015160ff16600c811115611d9257fe5b836127df565b93505b5050509695505050505050565b6000806000806000611db8612983565b8660405160200180828051906020019060200280838360005b83811015611de9578181015183820152602001611dd1565b505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611e315780518252601f199092019160209182019101611e12565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008181526001909252929020805492995097505015159150611f56905057600092505b8651831015611f56578683815181101515611e9457fe5b906020019060200201519150606060405190810160405280611eb58461289c565b60ff168152602001611ec6846128c2565b60ff90811682527dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858116602093840152875460018082018a5560008a815285902086519201805495870151604088015160ff199097169386169390931761ff00191661010093909516929092029390931761ffff166201000094909216939093021790915593909301929050611e7d565b509295945050505050565b60008082600080611f73898989611a8b565b81526020810191909152604001600020558215801592508290611fb657507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638314155b60408051841515815290519192508591600160a060020a0380891692908a16917f759b9a74d5354b5801710a0c1b283cc9f0d32b607ac8ced10c83ac8e75c77d529181900360200190a4801561204d576040805184815290518591600160a060020a0380891692908a16917f8dfee25d92d73b8c9b868f9fa3e215cc1981033f426e53803e3da4f09a2cfc30919081900360200190a45b505050505050565b5490565b5490565b600080600160a060020a03831615156120795760009150612084565b823b90506000811191505b50919050565b60408051600160a060020a0383166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a0823100000000000000000000000000000000000000000000000000000000179052600090818061210a86846128e7565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f5245564552544544000000006020820152919350915082151561219a576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b5095945050505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052600090610dfe8582612918565b8051602002815290565b604080517f524f4c45000000000000000000000000000000000000000000000000000000006020808301919091526c01000000000000000000000000600160a060020a0386160260248301526038808301859052835180840390910181526058909201928390528151600093918291908401908083835b602083106122c65780518252601f1990920191602091820191016122a7565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b6123258484847f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563611f61565b610a66818484611a01565b612338610e3f565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156123c2576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506123fb6123ce6119fd565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61296616565b565b606060006020835181151561240e57fe5b049050806020028351146040805190810160405280601a81526020017f434f4e56455253494f4e5f494d50524f5045525f4c454e4754480000000000008152509015156124a5576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b5082525090565b60008080808080808080600c8f6020015160ff16600c8111156124cb57fe5b600c8111156124d657fe5b1415612541576125098f604001517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661296a565b9199509750955061251e8e898f8f8f8f611b5f565b945061253a8e8661252f5787612531565b885b8f8f8f8f611b5f565b985061266d565b61256e8f604001517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661296a565b5090945092506125828e858f8f8f8f611b5f565b915060088f6020015160ff16600c81111561259957fe5b600c8111156125a457fe5b14156125b3578115985061266d565b8180156125dd5750600a8f6020015160ff16600c8111156125d057fe5b600c8111156125db57fe5b145b156125eb576001985061266d565b81158015612616575060098f6020015160ff16600c81111561260957fe5b600c81111561261457fe5b145b15612624576000985061266d565b6126328e848f8f8f8f611b5f565b9050600b8f6020015160ff16600c81111561264957fe5b600c81111561265457fe5b1415612669578015158215151415985061266d565b8098505b50505050505050509695505050505050565b604051600160a060020a0385811660248301908152908516604483015260648201849052608060848301908152835160a484015283516000937f2a151090000000000000000000000000000000000000000000000000000000009360609386938493849388938e938e938e938e939092909160c40190602080860191028083838d5b83811015612719578181015183820152602001612701565b5050505090500195505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505093506000808551602087018e5afa92508215156127a457600095506127cd565b3d9150602082146127b857600095506127cd565b604051826000823e8051915060008152508095505b505050505095945050505050565b4290565b6000600183600c8111156127ef57fe5b14156127fe5750828114610ae3565b600283600c81111561280c57fe5b141561281c575082811415610ae3565b600383600c81111561282a57fe5b14156128395750808311610ae3565b600483600c81111561284757fe5b14156128565750808310610ae3565b600583600c81111561286457fe5b1415612874575080831015610ae3565b600683600c81111561288257fe5b1415612892575080831115610ae3565b5060009392505050565b7f0100000000000000000000000000000000000000000000000000000000000000900490565b7e01000000000000000000000000000000000000000000000000000000000000900490565b6000806000806040516020818751602089018a5afa9250600083111561290c57805191505b50909590945092505050565b6000806040516020818551602087016000895af1600081111561295c573d801561294957602081146129525761295a565b6001935061295a565b600183511493505b505b5090949350505050565b9055565b9064010000000082049068010000000000000000830490565b604080516060810182526000808252602082018190529181019190915290560008c379a000000000000000000000000000000000000000000000000000000000a165627a7a72305820f9b9c9dd6e4e24cb4559fce244dd39f72397edddd0a6902e80889dfd3f4306cc0029ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e",
  "deployedBytecode": "0x6080604052600436106101955763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630803fac0811461019a5780630808343e146101c357806309699ff5146101e95780630a8ed3db1461020d57806315949ed7146102375780631b5e75be146102735780631d63ff2b146102e85780632914b9bd146102fd57806332f0a3b5146103725780633d6ab68f146103875780636815c9921461039c5780636d6712d8146104105780637e7db6e11461043a57806380afdea81461045b5780638b3dd749146104705780639d0effdb146104855780639d4941d8146104af578063a03c5832146104d0578063a1658fad14610541578063a479e508146105a8578063a5ed8bf8146105bd578063a885508a146105d2578063afd925df146105f6578063b190572714610620578063be03847814610644578063c4d66de814610675578063c513f66e14610696578063d4aae0c4146106ab578063de4796ed146106c0578063f516bc0e146106d5578063f520b58d146106ea578063fdef91061461075e575b600080fd5b3480156101a657600080fd5b506101af6107cd565b604080519115158252519081900360200190f35b3480156101cf57600080fd5b506101e7600160a060020a03600435166024356107f6565b005b3480156101f557600080fd5b506101e7600160a060020a03600435166024356109b9565b34801561021957600080fd5b506101e7600160a060020a0360043581169060243516604435610a6c565b34801561024357600080fd5b50610261600160a060020a0360043581169060243516604435610aa8565b60408051918252519081900360200190f35b34801561027f57600080fd5b5060408051602060046084358181013583810280860185019096528085526101af9583359560248035600160a060020a039081169760443590911696606435963696919560a495949091019282919085019084908082843750949750610aea9650505050505050565b3480156102f457600080fd5b50610261610b37565b34801561030957600080fd5b506040805160206004803580820135601f8101849004840285018401909552848452610356943694929360249392840191908190840183828082843750949750610b3c9650505050505050565b60408051600160a060020a039092168252519081900360200190f35b34801561037e57600080fd5b50610356610c3b565b34801561039357600080fd5b50610261610ccc565b3480156103a857600080fd5b5060408051606435600481810135602081810285810182019096528185526101e795600160a060020a0384358116966024803590921696604435963696909560849593949290920192909182919085019084908082843750949750610cf09650505050505050565b34801561041c57600080fd5b506101af600160a060020a0360043581169060243516604435610de2565b34801561044657600080fd5b506101af600160a060020a0360043516610e09565b34801561046757600080fd5b50610261610e0f565b34801561047c57600080fd5b50610261610e3f565b34801561049157600080fd5b506101e7600160a060020a0360043581169060243516604435610e6a565b3480156104bb57600080fd5b506101e7600160a060020a0360043516610f18565b3480156104dc57600080fd5b506104fd600160a060020a03600435811690602435166044356064356111b6565b6040805160ff94851681529290931660208301527dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff168183015290519081900360600190f35b34801561054d57600080fd5b5060408051602060046044358181013583810280860185019096528085526101af958335600160a060020a031695602480359636969560649593949201929182918501908490808284375094975061124b9650505050505050565b3480156105b457600080fd5b506103566113b2565b3480156105c957600080fd5b50610356611467565b3480156105de57600080fd5b506101e7600160a060020a036004351660243561146d565b34801561060257600080fd5b506101e7600160a060020a036004358116906024351660443561151a565b34801561062c57600080fd5b50610356600160a060020a03600435166024356115c6565b34801561065057600080fd5b506101e7600160a060020a0360043581169060243581169060443590606435166115f7565b34801561068157600080fd5b506101e7600160a060020a0360043516611775565b3480156106a257600080fd5b506102616118dc565b3480156106b757600080fd5b50610356611900565b3480156106cc57600080fd5b506101af61192b565b3480156106e157600080fd5b5061035661193e565b3480156106f657600080fd5b5060408051606435600481810135602081810285810182019096528185526101af95600160a060020a03843581169660248035909216966044359636969095608495939492909201929091829190850190849080828437509497506119439650505050505050565b34801561076a57600080fd5b50604080516020601f6064356004818101359283018490048402850184019095528184526101af94600160a060020a0381358116956024803590921695604435953695608494019181908401838280828437509497506119e79650505050505050565b6000806107d8610e3f565b905080158015906107f05750806107ed6119fd565b10155b91505090565b604080516000808252602082019092527f0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a916108389133918491905b5061124b565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156108ff576040516000805160206129a483398151915281526004018080602001828103825283818151815260200191508051906020019080838360005b838110156108c45781810151838201526020016108ac565b50505050905090810190601f1680156108f15780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b508282600061090e83836115c6565b600160a060020a0316146040805190810160405280601481526020017f41434c5f4558495354454e545f4d414e414745520000000000000000000000008152509015156109a5576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506109b260018686611a01565b5050505050565b81816109c582826115c6565b60408051808201909152601381527f41434c5f415554485f4e4f5f4d414e4147455200000000000000000000000000602082015290600160a060020a03163314610a59576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50610a6660018585611a01565b50505050565b610aa38383836000604051908082528060200260200182016040528015610a9d578160200160208202803883390190505b50610cf0565b505050565b600060016000806000610abc888888611a8b565b81526020808201929092526040908101600090812054845291830193909352910190205490505b9392505050565b60007f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563861415610b1c57506001610b2e565b610b2b86600087878787611b5f565b90505b95945050505050565b600081565b6000610b466113b2565b600160a060020a03166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610bbd578181015183820152602001610ba5565b50505050905090810190601f168015610bea5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b158015610c0957600080fd5b505af1158015610c1d573d6000803e3d6000fd5b505050506040513d6020811015610c3357600080fd5b505192915050565b6000610c45611900565b600160a060020a03166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015610c9b57600080fd5b505af1158015610caf573d6000803e3d6000fd5b505050506040513d6020811015610cc557600080fd5b5051905090565b7f0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a81565b60008383610cfe82826115c6565b60408051808201909152601381527f41434c5f415554485f4e4f5f4d414e4147455200000000000000000000000000602082015290600160a060020a03163314610d92576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506000845111610dc2577f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563610dcb565b610dcb84611da8565b9250610dd987878786611f61565b50505050505050565b60408051600080825260208201909252610dfe85858584611943565b91505b509392505050565b50600190565b6000610e3a7fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b612055565b905090565b6000610e3a7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e612055565b8181610e7682826115c6565b60408051808201909152601381527f41434c5f415554485f4e4f5f4d414e4147455200000000000000000000000000602082015290600160a060020a03163314610f0a576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506109b28585856000611f61565b6000806000610f2684610e09565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515610fb1576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50610fba610c3b565b9250610fc58361205d565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e54524143540000000000006020820152901515611050576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50600160a060020a03841615156110a15760405130319250600160a060020a0384169083156108fc029084906000818181858888f1935050505015801561109b573d6000803e3d6000fd5b50611165565b50826110bc600160a060020a0382163063ffffffff61208a16565b91506110d8600160a060020a038216848463ffffffff6121a416565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611163576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b505b83600160a060020a031683600160a060020a03167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b600080600080600160008060006111ce8c8c8c611a8b565b81526020808201929092526040908101600090812054845291830193909352910190208054869081106111fd57fe5b60009182526020909120015460ff8082169a61010083049091169950620100009091047dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff16975095505050505050565b6000806112566107cd565b15156112655760009150610e01565b61126d611900565b9050600160a060020a03811615156112885760009150610e01565b80600160a060020a031663fdef91068630876112a388612226565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff8716028152600160a060020a03808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b8381101561132e578181015183820152602001611316565b50505050905090810190601f16801561135b5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561137d57600080fd5b505af1158015611391573d6000803e3d6000fd5b505050506040513d60208110156113a757600080fd5b505195945050505050565b6000806113bd611900565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd6160248201529051600160a060020a03929092169163be00bbd8916044808201926020929091908290030181600087803b158015610c0957600080fd5b60001981565b818161147982826115c6565b60408051808201909152601381527f41434c5f415554485f4e4f5f4d414e4147455200000000000000000000000000602082015290600160a060020a0316331461150d576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50610a6660008585611a01565b818161152682826115c6565b60408051808201909152601381527f41434c5f415554485f4e4f5f4d414e4147455200000000000000000000000000602082015290600160a060020a031633146115ba576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506109b2858585611a01565b6000600260006115d68585612230565b8152602081019190915260400160002054600160a060020a03169392505050565b604080516000808252602082019092527f0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a91611637913391849190610832565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156116c2576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50838360006116d183836115c6565b600160a060020a0316146040805190810160405280601481526020017f41434c5f4558495354454e545f4d414e41474552000000000000000000000000815250901515611768576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50610dd9878787876122f9565b61177d610e3f565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015611807576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b50611810612330565b611818611900565b60408051808201909152601481527f41434c5f415554485f494e49545f4b45524e454c000000000000000000000000602082015290600160a060020a031633146118ac576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506118d981307f0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a826122f9565b50565b7f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56381565b6000610e3a7f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b612055565b6000600019611938610e3f565b14905090565b600181565b6000806000806000611956898989611a8b565b81526020810191909152604001600020549150811580159061198057506119808288888888610aea565b1561198e57600192506119dd565b60008061199e6000198989611a8b565b8152602081019190915260400160002054905080158015906119ca57506119ca81600019888888610aea565b156119d857600192506119dd565b600092505b5050949350505050565b6000610b2e8585856119f8866123fd565b611943565b4390565b8260026000611a108585612230565b815260208101919091526040908101600090812080547fffffffffffffffffffffffff000000000000000000000000000000000000000016600160a060020a039485161790559051858316928492908616917ff3addc8b8e25ee11528a61b0e65092cae0666ef0ec0c64cb303993c88d689b4d9190a4505050565b604080517f5045524d495353494f4e000000000000000000000000000000000000000000006020808301919091526c01000000000000000000000000600160a060020a038088168202602a850152861602603e8301526052808301859052835180840390910181526072909201928390528151600093918291908401908083835b60208310611b2b5780518252601f199092019160209182019101611b0c565b5181516020939093036101000a60001901801990911692169190911790526040519201829003909120979650505050505050565b6000611b69612983565b600088815260016020526040812054819063ffffffff8a1610611b8f5760009350611d9b565b60008a8152600160205260409020805463ffffffff8b16908110611baf57fe5b600091825260209182902060408051606081018252929091015460ff8082168085526101008304909116948401949094526201000090047dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1690820152935060cc1415611c2957611c22838b8a8a8a8a6124ac565b9350611d9b565b50604082015182517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9091169060ff1660cb1415611c8c57611c7083604001518989898961267f565b611c7b576000611c7e565b60015b60ff16915060019050611d4a565b825160ff1660c81415611ca857611ca16119fd565b9150611d4a565b825160ff1660c91415611cbd57611ca16127db565b825160ff1660cd1415611cf65782604001517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff169150611d4a565b8451835160ff1610611d0b5760009350611d9b565b82518551869160ff16908110611d1d57fe5b906020019060200201517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1691505b6007836020015160ff16600c811115611d5f57fe5b600c811115611d6a57fe5b1415611d7b57600082119350611d9b565b611d9882846020015160ff16600c811115611d9257fe5b836127df565b93505b5050509695505050505050565b6000806000806000611db8612983565b8660405160200180828051906020019060200280838360005b83811015611de9578181015183820152602001611dd1565b505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310611e315780518252601f199092019160209182019101611e12565b51815160209384036101000a6000190180199092169116179052604080519290940182900390912060008181526001909252929020805492995097505015159150611f56905057600092505b8651831015611f56578683815181101515611e9457fe5b906020019060200201519150606060405190810160405280611eb58461289c565b60ff168152602001611ec6846128c2565b60ff90811682527dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff858116602093840152875460018082018a5560008a815285902086519201805495870151604088015160ff199097169386169390931761ff00191661010093909516929092029390931761ffff166201000094909216939093021790915593909301929050611e7d565b509295945050505050565b60008082600080611f73898989611a8b565b81526020810191909152604001600020558215801592508290611fb657507f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5638314155b60408051841515815290519192508591600160a060020a0380891692908a16917f759b9a74d5354b5801710a0c1b283cc9f0d32b607ac8ced10c83ac8e75c77d529181900360200190a4801561204d576040805184815290518591600160a060020a0380891692908a16917f8dfee25d92d73b8c9b868f9fa3e215cc1981033f426e53803e3da4f09a2cfc30919081900360200190a45b505050505050565b5490565b5490565b600080600160a060020a03831615156120795760009150612084565b823b90506000811191505b50919050565b60408051600160a060020a0383166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a0823100000000000000000000000000000000000000000000000000000000179052600090818061210a86846128e7565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f5245564552544544000000006020820152919350915082151561219a576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b5095945050505050565b60408051600160a060020a038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052600090610dfe8582612918565b8051602002815290565b604080517f524f4c45000000000000000000000000000000000000000000000000000000006020808301919091526c01000000000000000000000000600160a060020a0386160260248301526038808301859052835180840390910181526058909201928390528151600093918291908401908083835b602083106122c65780518252601f1990920191602091820191016122a7565b5181516020939093036101000a600019018019909116921691909117905260405192018290039091209695505050505050565b6123258484847f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563611f61565b610a66818484611a01565b612338610e3f565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156123c2576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b506123fb6123ce6119fd565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff61296616565b565b606060006020835181151561240e57fe5b049050806020028351146040805190810160405280601a81526020017f434f4e56455253494f4e5f494d50524f5045525f4c454e4754480000000000008152509015156124a5576040516000805160206129a48339815191528152600401808060200182810382528381815181526020019150805190602001908083836000838110156108c45781810151838201526020016108ac565b5082525090565b60008080808080808080600c8f6020015160ff16600c8111156124cb57fe5b600c8111156124d657fe5b1415612541576125098f604001517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661296a565b9199509750955061251e8e898f8f8f8f611b5f565b945061253a8e8661252f5787612531565b885b8f8f8f8f611b5f565b985061266d565b61256e8f604001517dffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1661296a565b5090945092506125828e858f8f8f8f611b5f565b915060088f6020015160ff16600c81111561259957fe5b600c8111156125a457fe5b14156125b3578115985061266d565b8180156125dd5750600a8f6020015160ff16600c8111156125d057fe5b600c8111156125db57fe5b145b156125eb576001985061266d565b81158015612616575060098f6020015160ff16600c81111561260957fe5b600c81111561261457fe5b145b15612624576000985061266d565b6126328e848f8f8f8f611b5f565b9050600b8f6020015160ff16600c81111561264957fe5b600c81111561265457fe5b1415612669578015158215151415985061266d565b8098505b50505050505050509695505050505050565b604051600160a060020a0385811660248301908152908516604483015260648201849052608060848301908152835160a484015283516000937f2a151090000000000000000000000000000000000000000000000000000000009360609386938493849388938e938e938e938e939092909160c40190602080860191028083838d5b83811015612719578181015183820152602001612701565b5050505090500195505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505093506000808551602087018e5afa92508215156127a457600095506127cd565b3d9150602082146127b857600095506127cd565b604051826000823e8051915060008152508095505b505050505095945050505050565b4290565b6000600183600c8111156127ef57fe5b14156127fe5750828114610ae3565b600283600c81111561280c57fe5b141561281c575082811415610ae3565b600383600c81111561282a57fe5b14156128395750808311610ae3565b600483600c81111561284757fe5b14156128565750808310610ae3565b600583600c81111561286457fe5b1415612874575080831015610ae3565b600683600c81111561288257fe5b1415612892575080831115610ae3565b5060009392505050565b7f0100000000000000000000000000000000000000000000000000000000000000900490565b7e01000000000000000000000000000000000000000000000000000000000000900490565b6000806000806040516020818751602089018a5afa9250600083111561290c57805191505b50909590945092505050565b6000806040516020818551602087016000895af1600081111561295c573d801561294957602081146129525761295a565b6001935061295a565b600183511493505b505b5090949350505050565b9055565b9064010000000082049068010000000000000000830490565b604080516060810182526000808252602082018190529181019190915290560008c379a000000000000000000000000000000000000000000000000000000000a165627a7a72305820f9b9c9dd6e4e24cb4559fce244dd39f72397edddd0a6902e80889dfd3f4306cc0029",
  "devdoc": {
    "methods": {
      "allowRecoverability(address)": {
        "details": "By default deriving from AragonApp makes it recoverable",
        "params": {
          "token": "Token address that would be recovered"
        },
        "return": "bool whether the app allows the recovery"
      },
      "burnPermissionManager(address,bytes32)": {
        "params": {
          "_app": "Address of the app in which the permission is being burned",
          "_role": "Identifier for the group of actions being burned"
        }
      },
      "canPerform(address,bytes32,uint256[])": {
        "details": "Check whether an action can be performed by a sender for a particular role on this app",
        "params": {
          "_params": "Permission params for the role",
          "_role": "Role on this app",
          "_sender": "Sender of the call"
        },
        "return": "Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet."
      },
      "createBurnedPermission(address,bytes32)": {
        "params": {
          "_app": "Address of the app in which the permission is being burned",
          "_role": "Identifier for the group of actions being burned"
        }
      },
      "createPermission(address,address,bytes32,address)": {
        "details": "Creates a permission that wasn't previously set and managed.     If a created permission is removed it is possible to reset it with createPermission.     This is the **ONLY** way to create permissions and set managers to permissions that don't     have a manager.     In terms of the ACL being initialized, this function implicitly protects all the other     state-changing external functions, as they all require the sender to be a manager.",
        "params": {
          "_app": "Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)",
          "_entity": "Address of the whitelisted entity that will be able to perform the role",
          "_manager": "Address of the entity that will be able to grant and revoke the permission further.",
          "_role": "Identifier for the group of actions in app given access to perform"
        }
      },
      "getInitializationBlock()": {
        "return": "Block number in which the contract was initialized"
      },
      "getPermissionManager(address,bytes32)": {
        "details": "Get manager for permission",
        "params": {
          "_app": "Address of the app",
          "_role": "Identifier for a group of actions in app"
        },
        "return": "address of the manager for the permission"
      },
      "getPermissionParam(address,address,bytes32,uint256)": {
        "params": {
          "_app": "Address of the app",
          "_entity": "Address of the whitelisted entity that will be able to perform the role",
          "_index": "Index of parameter in the array",
          "_role": "Identifier for a group of actions in app"
        },
        "return": "Parameter (id, op, value)"
      },
      "getPermissionParamsLength(address,address,bytes32)": {
        "params": {
          "_app": "Address of the app",
          "_entity": "Address of the whitelisted entity that will be able to perform the role",
          "_role": "Identifier for a group of actions in app"
        },
        "return": "Length of the array"
      },
      "getRecoveryVault()": {
        "details": "Get the recovery vault for the app",
        "return": "Recovery vault address for the app"
      },
      "grantPermission(address,address,bytes32)": {
        "details": "Grants permission if allowed. This requires `msg.sender` to be the permission manager",
        "params": {
          "_app": "Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)",
          "_entity": "Address of the whitelisted entity that will be able to perform the role",
          "_role": "Identifier for the group of actions in app given access to perform"
        }
      },
      "grantPermissionP(address,address,bytes32,uint256[])": {
        "details": "Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager",
        "params": {
          "_app": "Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)",
          "_entity": "Address of the whitelisted entity that will be able to perform the role",
          "_params": "Permission parameters",
          "_role": "Identifier for the group of actions in app given access to perform"
        }
      },
      "hasInitialized()": {
        "return": "Whether the contract has been initialized by the time of the current block"
      },
      "hasPermission(address,address,bytes32,bytes)": {
        "details": "Function called by apps to check ACL on kernel or to check permission statu",
        "params": {
          "_how": "Permission parameters",
          "_where": "Identifier for a group of actions in app",
          "_who": "Sender of the original call"
        },
        "return": "boolean indicating whether the ACL allows the role or not"
      },
      "initialize(address)": {
        "details": "Initialize can only be called once. It saves the block number in which it was initialized.",
        "params": {
          "_permissionsCreator": "Entity that will be given permission over createPermission"
        }
      },
      "removePermissionManager(address,bytes32)": {
        "params": {
          "_app": "Address of the app in which the permission is being unmanaged",
          "_role": "Identifier for the group of actions being unmanaged"
        }
      },
      "revokePermission(address,address,bytes32)": {
        "details": "Revokes permission if allowed. This requires `msg.sender` to be the the permission manager",
        "params": {
          "_app": "Address of the app in which the role will be revoked",
          "_entity": "Address of the whitelisted entity to revoke access from",
          "_role": "Identifier for the group of actions in app being revoked"
        }
      },
      "setPermissionManager(address,address,bytes32)": {
        "params": {
          "_app": "Address of the app in which the permission management is being transferred",
          "_newManager": "Address for the new manager",
          "_role": "Identifier for the group of actions being transferred"
        }
      },
      "transferToVault(address)": {
        "params": {
          "_token": "Token balance to be sent to recovery vault."
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "burnPermissionManager(address,bytes32)": {
        "notice": "Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)"
      },
      "createBurnedPermission(address,bytes32)": {
        "notice": "Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)"
      },
      "createPermission(address,address,bytes32,address)": {
        "notice": "Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager"
      },
      "getPermissionParam(address,address,bytes32,uint256)": {
        "notice": "Get parameter for permission"
      },
      "getPermissionParamsLength(address,address,bytes32)": {
        "notice": "Get parameters for permission array length"
      },
      "grantPermission(address,address,bytes32)": {
        "notice": "Grant `_entity` the ability to perform actions requiring `_role` on `_app`"
      },
      "grantPermissionP(address,address,bytes32,uint256[])": {
        "notice": "Grant `_entity` the ability to perform actions requiring `_role` on `_app`"
      },
      "initialize(address)": {
        "notice": "Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions"
      },
      "removePermissionManager(address,bytes32)": {
        "notice": "Remove the manager of `_role` in `_app`"
      },
      "revokePermission(address,address,bytes32)": {
        "notice": "Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`"
      },
      "setPermissionManager(address,address,bytes32)": {
        "notice": "Set `_newManager` as the manager of `_role` in `_app`"
      },
      "transferToVault(address)": {
        "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
      }
    }
  }
}