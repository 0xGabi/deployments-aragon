{
  "address": "0xc36428063f69848D37bBb264087cF18EbeC7c73e",
  "abi": [
    {
      "constant": true,
      "inputs": [],
      "name": "registryBase",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ensSubdomainRegistrarBase",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ens",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "daoFactory",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_tld",
          "type": "bytes32"
        },
        {
          "name": "_label",
          "type": "bytes32"
        },
        {
          "name": "_root",
          "type": "address"
        }
      ],
      "name": "newAPM",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "repoBase",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "name": "_daoFactory",
          "type": "address"
        },
        {
          "name": "_registryBase",
          "type": "address"
        },
        {
          "name": "_repoBase",
          "type": "address"
        },
        {
          "name": "_ensSubBase",
          "type": "address"
        },
        {
          "name": "_ens",
          "type": "address"
        },
        {
          "name": "_ensFactory",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "node",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "name": "apm",
          "type": "address"
        }
      ],
      "name": "DeployAPM",
      "type": "event"
    }
  ],
  "transactionHash": "0x21b2c7cb67cd452bddcb842e554a5a0d264bdda276f34ab1e59390ccfdcffe10",
  "receipt": {
    "to": null,
    "from": "0x553114cF6E727eeE015e0dc2E8C91b08C428a629",
    "contractAddress": "0xc36428063f69848D37bBb264087cF18EbeC7c73e",
    "transactionIndex": 23,
    "gasUsed": "1853589",
    "logsBloom": "0x
    "blockHash": "0x05a85d877e81041317f33268d64f9ede165fb07b949e7e9eb57fd9fe648c607a",
    "transactionHash": "0x21b2c7cb67cd452bddcb842e554a5a0d264bdda276f34ab1e59390ccfdcffe10",
    "logs": [],
    "blockNumber": 7929358,
    "cumulativeGasUsed": "4115896",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0c514a00401666780fcA29d4CD6943085818F049",
    "0xFCc5e257E4dEa1b92A8C8e07D54eCeB198514D7F",
    "0x68716c2788489a5573eF9775B79c907B925ebF7c",
    "0x03846f2D84233F9a2d26753B64D10513e9678360",
    "0x8cF5A255ED61F403837F040B8D9f052857469273",
    "0x0000000000000000000000000000000000000000"
  ],
  "solcInputHash": "78a2f2e46eb54fbd65e9a3b2074936eb",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"registryBase\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ensSubdomainRegistrarBase\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ens\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"daoFactory\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_tld\",\"type\":\"bytes32\"},{\"name\":\"_label\",\"type\":\"bytes32\"},{\"name\":\"_root\",\"type\":\"address\"}],\"name\":\"newAPM\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"repoBase\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_daoFactory\",\"type\":\"address\"},{\"name\":\"_registryBase\",\"type\":\"address\"},{\"name\":\"_repoBase\",\"type\":\"address\"},{\"name\":\"_ensSubBase\",\"type\":\"address\"},{\"name\":\"_ens\",\"type\":\"address\"},{\"name\":\"_ensFactory\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"node\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"apm\",\"type\":\"address\"}],\"name\":\"DeployAPM\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"newAPM(bytes32,bytes32,address)\":{\"params\":{\"_label\":\"The subdomain label\",\"_root\":\"Manager for the new aragonPM DAO\",\"_tld\":\"The parent node of the controlled subdomain\"},\"return\":\"The new aragonPM's APMRegistry app\"}}},\"userdoc\":{\"methods\":{\"newAPM(bytes32,bytes32,address)\":{\"notice\":\"Create a new Aragon Package Manager (aragonPM) DAO, holding the `_label` subdomain from parent `_tld` and controlled by `_root`\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/factory/APMRegistryFactory.sol\":\"APMRegistryFactory\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/acl/ACL.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/TimeHelpers.sol\\\";\\nimport \\\"./ACLSyntaxSugar.sol\\\";\\nimport \\\"./IACL.sol\\\";\\nimport \\\"./IACLOracle.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract ACL is IACL, TimeHelpers, AragonApp, ACLHelpers {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = keccak256(\\\"CREATE_PERMISSIONS_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_PERMISSIONS_ROLE = 0x0b719b33c83b8e5d300c521cb8b54ae9bd933996a14bef8c2f4e0285d2d2400a;\\n\\n    enum Op { NONE, EQ, NEQ, GT, LT, GTE, LTE, RET, NOT, AND, OR, XOR, IF_ELSE } // op types\\n\\n    struct Param {\\n        uint8 id;\\n        uint8 op;\\n        uint240 value; // even though value is an uint240 it can store addresses\\n        // in the case of 32 byte hashes losing 2 bytes precision isn't a huge deal\\n        // op and id take less than 1 byte each so it can be kept in 1 sstore\\n    }\\n\\n    uint8 internal constant BLOCK_NUMBER_PARAM_ID = 200;\\n    uint8 internal constant TIMESTAMP_PARAM_ID    = 201;\\n    // 202 is unused\\n    uint8 internal constant ORACLE_PARAM_ID       = 203;\\n    uint8 internal constant LOGIC_OP_PARAM_ID     = 204;\\n    uint8 internal constant PARAM_VALUE_PARAM_ID  = 205;\\n    // TODO: Add execution times param type?\\n\\n    /* Hardcoded constant to save gas\\n    bytes32 public constant EMPTY_PARAM_HASH = keccak256(uint256(0));\\n    */\\n    bytes32 public constant EMPTY_PARAM_HASH = 0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563;\\n    bytes32 public constant NO_PERMISSION = bytes32(0);\\n    address public constant ANY_ENTITY = address(-1);\\n    address public constant BURN_ENTITY = address(1); // address(0) is already used as \\\"no permission manager\\\"\\n\\n    string private constant ERROR_AUTH_INIT_KERNEL = \\\"ACL_AUTH_INIT_KERNEL\\\";\\n    string private constant ERROR_AUTH_NO_MANAGER = \\\"ACL_AUTH_NO_MANAGER\\\";\\n    string private constant ERROR_EXISTENT_MANAGER = \\\"ACL_EXISTENT_MANAGER\\\";\\n\\n    // Whether someone has a permission\\n    mapping (bytes32 => bytes32) internal permissions; // permissions hash => params hash\\n    mapping (bytes32 => Param[]) internal permissionParams; // params hash => params\\n\\n    // Who is the manager of a permission\\n    mapping (bytes32 => address) internal permissionManager;\\n\\n    event SetPermission(address indexed entity, address indexed app, bytes32 indexed role, bool allowed);\\n    event SetPermissionParams(address indexed entity, address indexed app, bytes32 indexed role, bytes32 paramsHash);\\n    event ChangePermissionManager(address indexed app, bytes32 indexed role, address indexed manager);\\n\\n    modifier onlyPermissionManager(address _app, bytes32 _role) {\\n        require(msg.sender == getPermissionManager(_app, _role), ERROR_AUTH_NO_MANAGER);\\n        _;\\n    }\\n\\n    modifier noPermissionManager(address _app, bytes32 _role) {\\n        // only allow permission creation (or re-creation) when there is no manager\\n        require(getPermissionManager(_app, _role) == address(0), ERROR_EXISTENT_MANAGER);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize an ACL instance and set `_permissionsCreator` as the entity that can create other permissions\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(address _permissionsCreator) public onlyInit {\\n        initialized();\\n        require(msg.sender == address(kernel()), ERROR_AUTH_INIT_KERNEL);\\n\\n        _createPermission(_permissionsCreator, this, CREATE_PERMISSIONS_ROLE, _permissionsCreator);\\n    }\\n\\n    /**\\n    * @dev Creates a permission that wasn't previously set and managed.\\n    *      If a created permission is removed it is possible to reset it with createPermission.\\n    *      This is the **ONLY** way to create permissions and set managers to permissions that don't\\n    *      have a manager.\\n    *      In terms of the ACL being initialized, this function implicitly protects all the other\\n    *      state-changing external functions, as they all require the sender to be a manager.\\n    * @notice Create a new permission granting `_entity` the ability to perform actions requiring `_role` on `_app`, setting `_manager` as the permission's manager\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _manager Address of the entity that will be able to grant and revoke the permission further.\\n    */\\n    function createPermission(address _entity, address _app, bytes32 _role, address _manager)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _createPermission(_entity, _app, _role, _manager);\\n    }\\n\\n    /**\\n    * @dev Grants permission if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    */\\n    function grantPermission(address _entity, address _app, bytes32 _role)\\n        external\\n    {\\n        grantPermissionP(_entity, _app, _role, new uint256[](0));\\n    }\\n\\n    /**\\n    * @dev Grants a permission with parameters if allowed. This requires `msg.sender` to be the permission manager\\n    * @notice Grant `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app in which the role will be allowed (requires app to depend on kernel for ACL)\\n    * @param _role Identifier for the group of actions in app given access to perform\\n    * @param _params Permission parameters\\n    */\\n    function grantPermissionP(address _entity, address _app, bytes32 _role, uint256[] _params)\\n        public\\n        onlyPermissionManager(_app, _role)\\n    {\\n        bytes32 paramsHash = _params.length > 0 ? _saveParams(_params) : EMPTY_PARAM_HASH;\\n        _setPermission(_entity, _app, _role, paramsHash);\\n    }\\n\\n    /**\\n    * @dev Revokes permission if allowed. This requires `msg.sender` to be the the permission manager\\n    * @notice Revoke from `_entity` the ability to perform actions requiring `_role` on `_app`\\n    * @param _entity Address of the whitelisted entity to revoke access from\\n    * @param _app Address of the app in which the role will be revoked\\n    * @param _role Identifier for the group of actions in app being revoked\\n    */\\n    function revokePermission(address _entity, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermission(_entity, _app, _role, NO_PERMISSION);\\n    }\\n\\n    /**\\n    * @notice Set `_newManager` as the manager of `_role` in `_app`\\n    * @param _newManager Address for the new manager\\n    * @param _app Address of the app in which the permission management is being transferred\\n    * @param _role Identifier for the group of actions being transferred\\n    */\\n    function setPermissionManager(address _newManager, address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(_newManager, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Remove the manager of `_role` in `_app`\\n    * @param _app Address of the app in which the permission is being unmanaged\\n    * @param _role Identifier for the group of actions being unmanaged\\n    */\\n    function removePermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(address(0), _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn non-existent `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function createBurnedPermission(address _app, bytes32 _role)\\n        external\\n        auth(CREATE_PERMISSIONS_ROLE)\\n        noPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n    * @notice Burn `_role` in `_app`, so no modification can be made to it (grant, revoke, permission manager)\\n    * @param _app Address of the app in which the permission is being burned\\n    * @param _role Identifier for the group of actions being burned\\n    */\\n    function burnPermissionManager(address _app, bytes32 _role)\\n        external\\n        onlyPermissionManager(_app, _role)\\n    {\\n        _setPermissionManager(BURN_ENTITY, _app, _role);\\n    }\\n\\n    /**\\n     * @notice Get parameters for permission array length\\n     * @param _entity Address of the whitelisted entity that will be able to perform the role\\n     * @param _app Address of the app\\n     * @param _role Identifier for a group of actions in app\\n     * @return Length of the array\\n     */\\n    function getPermissionParamsLength(address _entity, address _app, bytes32 _role) external view returns (uint) {\\n        return permissionParams[permissions[permissionHash(_entity, _app, _role)]].length;\\n    }\\n\\n    /**\\n    * @notice Get parameter for permission\\n    * @param _entity Address of the whitelisted entity that will be able to perform the role\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @param _index Index of parameter in the array\\n    * @return Parameter (id, op, value)\\n    */\\n    function getPermissionParam(address _entity, address _app, bytes32 _role, uint _index)\\n        external\\n        view\\n        returns (uint8, uint8, uint240)\\n    {\\n        Param storage param = permissionParams[permissions[permissionHash(_entity, _app, _role)]][_index];\\n        return (param.id, param.op, param.value);\\n    }\\n\\n    /**\\n    * @dev Get manager for permission\\n    * @param _app Address of the app\\n    * @param _role Identifier for a group of actions in app\\n    * @return address of the manager for the permission\\n    */\\n    function getPermissionManager(address _app, bytes32 _role) public view returns (address) {\\n        return permissionManager[roleHash(_app, _role)];\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission statu\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _where Identifier for a group of actions in app\\n    * @param _how Permission parameters\\n    * @return boolean indicating whether the ACL allows the role or not\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes memory _how) public view returns (bool) {\\n        return hasPermission(_who, _where, _what, ConversionHelpers.dangerouslyCastBytesToUintArray(_how));\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what, uint256[] memory _how) public view returns (bool) {\\n        bytes32 whoParams = permissions[permissionHash(_who, _where, _what)];\\n        if (whoParams != NO_PERMISSION && evalParams(whoParams, _who, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        bytes32 anyParams = permissions[permissionHash(ANY_ENTITY, _where, _what)];\\n        if (anyParams != NO_PERMISSION && evalParams(anyParams, ANY_ENTITY, _where, _what, _how)) {\\n            return true;\\n        }\\n\\n        return false;\\n    }\\n\\n    function hasPermission(address _who, address _where, bytes32 _what) public view returns (bool) {\\n        uint256[] memory empty = new uint256[](0);\\n        return hasPermission(_who, _where, _what, empty);\\n    }\\n\\n    function evalParams(\\n        bytes32 _paramsHash,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) public view returns (bool)\\n    {\\n        if (_paramsHash == EMPTY_PARAM_HASH) {\\n            return true;\\n        }\\n\\n        return _evalParam(_paramsHash, 0, _who, _where, _what, _how);\\n    }\\n\\n    /**\\n    * @dev Internal createPermission for access inside the kernel (on instantiation)\\n    */\\n    function _createPermission(address _entity, address _app, bytes32 _role, address _manager) internal {\\n        _setPermission(_entity, _app, _role, EMPTY_PARAM_HASH);\\n        _setPermissionManager(_manager, _app, _role);\\n    }\\n\\n    /**\\n    * @dev Internal function called to actually save the permission\\n    */\\n    function _setPermission(address _entity, address _app, bytes32 _role, bytes32 _paramsHash) internal {\\n        permissions[permissionHash(_entity, _app, _role)] = _paramsHash;\\n        bool entityHasPermission = _paramsHash != NO_PERMISSION;\\n        bool permissionHasParams = entityHasPermission && _paramsHash != EMPTY_PARAM_HASH;\\n\\n        emit SetPermission(_entity, _app, _role, entityHasPermission);\\n        if (permissionHasParams) {\\n            emit SetPermissionParams(_entity, _app, _role, _paramsHash);\\n        }\\n    }\\n\\n    function _saveParams(uint256[] _encodedParams) internal returns (bytes32) {\\n        bytes32 paramHash = keccak256(abi.encodePacked(_encodedParams));\\n        Param[] storage params = permissionParams[paramHash];\\n\\n        if (params.length == 0) { // params not saved before\\n            for (uint256 i = 0; i < _encodedParams.length; i++) {\\n                uint256 encodedParam = _encodedParams[i];\\n                Param memory param = Param(decodeParamId(encodedParam), decodeParamOp(encodedParam), uint240(encodedParam));\\n                params.push(param);\\n            }\\n        }\\n\\n        return paramHash;\\n    }\\n\\n    function _evalParam(\\n        bytes32 _paramsHash,\\n        uint32 _paramId,\\n        address _who,\\n        address _where,\\n        bytes32 _what,\\n        uint256[] _how\\n    ) internal view returns (bool)\\n    {\\n        if (_paramId >= permissionParams[_paramsHash].length) {\\n            return false; // out of bounds\\n        }\\n\\n        Param memory param = permissionParams[_paramsHash][_paramId];\\n\\n        if (param.id == LOGIC_OP_PARAM_ID) {\\n            return _evalLogic(param, _paramsHash, _who, _where, _what, _how);\\n        }\\n\\n        uint256 value;\\n        uint256 comparedTo = uint256(param.value);\\n\\n        // get value\\n        if (param.id == ORACLE_PARAM_ID) {\\n            value = checkOracle(IACLOracle(param.value), _who, _where, _what, _how) ? 1 : 0;\\n            comparedTo = 1;\\n        } else if (param.id == BLOCK_NUMBER_PARAM_ID) {\\n            value = getBlockNumber();\\n        } else if (param.id == TIMESTAMP_PARAM_ID) {\\n            value = getTimestamp();\\n        } else if (param.id == PARAM_VALUE_PARAM_ID) {\\n            value = uint256(param.value);\\n        } else {\\n            if (param.id >= _how.length) {\\n                return false;\\n            }\\n            value = uint256(uint240(_how[param.id])); // force lost precision\\n        }\\n\\n        if (Op(param.op) == Op.RET) {\\n            return uint256(value) > 0;\\n        }\\n\\n        return compare(value, Op(param.op), comparedTo);\\n    }\\n\\n    function _evalLogic(Param _param, bytes32 _paramsHash, address _who, address _where, bytes32 _what, uint256[] _how)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        if (Op(_param.op) == Op.IF_ELSE) {\\n            uint32 conditionParam;\\n            uint32 successParam;\\n            uint32 failureParam;\\n\\n            (conditionParam, successParam, failureParam) = decodeParamsList(uint256(_param.value));\\n            bool result = _evalParam(_paramsHash, conditionParam, _who, _where, _what, _how);\\n\\n            return _evalParam(_paramsHash, result ? successParam : failureParam, _who, _where, _what, _how);\\n        }\\n\\n        uint32 param1;\\n        uint32 param2;\\n\\n        (param1, param2,) = decodeParamsList(uint256(_param.value));\\n        bool r1 = _evalParam(_paramsHash, param1, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.NOT) {\\n            return !r1;\\n        }\\n\\n        if (r1 && Op(_param.op) == Op.OR) {\\n            return true;\\n        }\\n\\n        if (!r1 && Op(_param.op) == Op.AND) {\\n            return false;\\n        }\\n\\n        bool r2 = _evalParam(_paramsHash, param2, _who, _where, _what, _how);\\n\\n        if (Op(_param.op) == Op.XOR) {\\n            return r1 != r2;\\n        }\\n\\n        return r2; // both or and and depend on result of r2 after checks\\n    }\\n\\n    function compare(uint256 _a, Op _op, uint256 _b) internal pure returns (bool) {\\n        if (_op == Op.EQ)  return _a == _b;                              // solium-disable-line lbrace\\n        if (_op == Op.NEQ) return _a != _b;                              // solium-disable-line lbrace\\n        if (_op == Op.GT)  return _a > _b;                               // solium-disable-line lbrace\\n        if (_op == Op.LT)  return _a < _b;                               // solium-disable-line lbrace\\n        if (_op == Op.GTE) return _a >= _b;                              // solium-disable-line lbrace\\n        if (_op == Op.LTE) return _a <= _b;                              // solium-disable-line lbrace\\n        return false;\\n    }\\n\\n    function checkOracle(IACLOracle _oracleAddr, address _who, address _where, bytes32 _what, uint256[] _how) internal view returns (bool) {\\n        bytes4 sig = _oracleAddr.canPerform.selector;\\n\\n        // a raw call is required so we can return false if the call reverts, rather than reverting\\n        bytes memory checkCalldata = abi.encodeWithSelector(sig, _who, _where, _what, _how);\\n\\n        bool ok;\\n        assembly {\\n            // send all available gas; if the oracle eats up all the gas, we will eventually revert\\n            // note that we are currently guaranteed to still have some gas after the call from\\n            // EIP-150's 63/64 gas forward rule\\n            ok := staticcall(gas, _oracleAddr, add(checkCalldata, 0x20), mload(checkCalldata), 0, 0)\\n        }\\n\\n        if (!ok) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := returndatasize }\\n        if (size != 32) {\\n            return false;\\n        }\\n\\n        bool result;\\n        assembly {\\n            let ptr := mload(0x40)       // get next free memory ptr\\n            returndatacopy(ptr, 0, size) // copy return from above `staticcall`\\n            result := mload(ptr)         // read data at ptr and set it to result\\n            mstore(ptr, 0)               // set pointer memory to 0 so it still is the next free ptr\\n        }\\n\\n        return result;\\n    }\\n\\n    /**\\n    * @dev Internal function that sets management\\n    */\\n    function _setPermissionManager(address _newManager, address _app, bytes32 _role) internal {\\n        permissionManager[roleHash(_app, _role)] = _newManager;\\n        emit ChangePermissionManager(_app, _role, _newManager);\\n    }\\n\\n    function roleHash(address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"ROLE\\\", _where, _what));\\n    }\\n\\n    function permissionHash(address _who, address _where, bytes32 _what) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"PERMISSION\\\", _who, _where, _what));\\n    }\\n}\\n\",\"keccak256\":\"0x1c850377b65614983bda130233257eab46f6de300d33c585c3c90af962fb535f\"},\"contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x672a96975fc17f66905e775645cc93249426ce9601aef597a13d1e449c7f89d0\"},\"contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0x7e081f42891bbcc8fa9f3a67efb34ecafa8e2c075e37a01d74d221c45ddfdd10\"},\"contracts/acl/IACLOracle.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACLOracle {\\n    function canPerform(address who, address where, bytes32 what, uint256[] how) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x76b78ed68eafa0e3c9a4a9e4151f136f13dbcca0ac65cc43501db7b6a1189867\"},\"contracts/apm/APMRegistry.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../lib/ens/AbstractENS.sol\\\";\\nimport \\\"../ens/ENSSubdomainRegistrar.sol\\\";\\nimport \\\"../factory/AppProxyFactory.sol\\\";\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\nimport \\\"./Repo.sol\\\";\\n\\n\\ncontract APMInternalAppNames {\\n    string internal constant APM_APP_NAME = \\\"apm-registry\\\";\\n    string internal constant REPO_APP_NAME = \\\"apm-repo\\\";\\n    string internal constant ENS_SUB_APP_NAME = \\\"apm-enssub\\\";\\n}\\n\\n\\ncontract APMRegistry is AragonApp, AppProxyFactory, APMInternalAppNames {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_REPO_ROLE = keccak256(\\\"CREATE_REPO_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_REPO_ROLE = 0x2a9494d64846c9fdbf0158785aa330d8bc9caf45af27fa0e8898eb4d55adcea6;\\n\\n    string private constant ERROR_INIT_PERMISSIONS = \\\"APMREG_INIT_PERMISSIONS\\\";\\n    string private constant ERROR_EMPTY_NAME = \\\"APMREG_EMPTY_NAME\\\";\\n\\n    AbstractENS public ens;\\n    ENSSubdomainRegistrar public registrar;\\n\\n    event NewRepo(bytes32 id, string name, address repo);\\n\\n    /**\\n    * NEEDS CREATE_NAME_ROLE and POINT_ROOTNODE_ROLE permissions on registrar\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized\\n    * @notice Initialize this APMRegistry instance and set `_registrar` as the ENS subdomain registrar\\n    * @param _registrar ENSSubdomainRegistrar instance that holds registry root node ownership\\n    */\\n    function initialize(ENSSubdomainRegistrar _registrar) public onlyInit {\\n        initialized();\\n\\n        registrar = _registrar;\\n        ens = registrar.ens();\\n\\n        registrar.pointRootNode(this);\\n\\n        // Check APM has all permissions it needss\\n        ACL acl = ACL(kernel().acl());\\n        require(acl.hasPermission(this, registrar, registrar.CREATE_NAME_ROLE()), ERROR_INIT_PERMISSIONS);\\n        require(acl.hasPermission(this, acl, acl.CREATE_PERMISSIONS_ROLE()), ERROR_INIT_PERMISSIONS);\\n    }\\n\\n    /**\\n    * @notice Create new repo in registry with `_name`\\n    * @param _name Repo name, must be ununsed\\n    * @param _dev Address that will be given permission to create versions\\n    */\\n    function newRepo(string _name, address _dev) public auth(CREATE_REPO_ROLE) returns (Repo) {\\n        return _newRepo(_name, _dev);\\n    }\\n\\n    /**\\n    * @notice Create new repo in registry with `_name` and publish a first version with contract `_contractAddress` and content `@fromHex(_contentURI)`\\n    * @param _name Repo name\\n    * @param _dev Address that will be given permission to create versions\\n    * @param _initialSemanticVersion Semantic version for new repo version\\n    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\\n    * @param _contentURI External URI for fetching new version's content\\n    */\\n    function newRepoWithVersion(\\n        string _name,\\n        address _dev,\\n        uint16[3] _initialSemanticVersion,\\n        address _contractAddress,\\n        bytes _contentURI\\n    ) public auth(CREATE_REPO_ROLE) returns (Repo)\\n    {\\n        Repo repo = _newRepo(_name, this); // need to have permissions to create version\\n        repo.newVersion(_initialSemanticVersion, _contractAddress, _contentURI);\\n\\n        // Give permissions to _dev\\n        ACL acl = ACL(kernel().acl());\\n        acl.revokePermission(this, repo, repo.CREATE_VERSION_ROLE());\\n        acl.grantPermission(_dev, repo, repo.CREATE_VERSION_ROLE());\\n        acl.setPermissionManager(_dev, repo, repo.CREATE_VERSION_ROLE());\\n        return repo;\\n    }\\n\\n    function _newRepo(string _name, address _dev) internal returns (Repo) {\\n        require(bytes(_name).length > 0, ERROR_EMPTY_NAME);\\n\\n        Repo repo = newClonedRepo();\\n\\n        ACL(kernel().acl()).createPermission(_dev, repo, repo.CREATE_VERSION_ROLE(), _dev);\\n\\n        // Creates [name] subdomain in the rootNode and sets registry as resolver\\n        // This will fail if repo name already exists\\n        bytes32 node = registrar.createNameAndPoint(keccak256(abi.encodePacked(_name)), repo);\\n\\n        emit NewRepo(node, _name, repo);\\n\\n        return repo;\\n    }\\n\\n    function newClonedRepo() internal returns (Repo repo) {\\n        repo = Repo(newAppProxy(kernel(), repoAppId()));\\n        repo.initialize();\\n    }\\n\\n    function repoAppId() internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(registrar.rootNode(), keccak256(abi.encodePacked(REPO_APP_NAME))));\\n    }\\n}\\n\",\"keccak256\":\"0x63a4b7e1206942e782c8a9c746b3a7bdf10e2a55438b7ae266016d4fcca7c635\"},\"contracts/apm/Repo.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract Repo is AragonApp {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_VERSION_ROLE = keccak256(\\\"CREATE_VERSION_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_VERSION_ROLE = 0x1f56cfecd3595a2e6cc1a7e6cb0b20df84cdbd92eff2fee554e70e4e45a9a7d8;\\n\\n    string private constant ERROR_INVALID_BUMP = \\\"REPO_INVALID_BUMP\\\";\\n    string private constant ERROR_INVALID_VERSION = \\\"REPO_INVALID_VERSION\\\";\\n    string private constant ERROR_INEXISTENT_VERSION = \\\"REPO_INEXISTENT_VERSION\\\";\\n\\n    struct Version {\\n        uint16[3] semanticVersion;\\n        address contractAddress;\\n        bytes contentURI;\\n    }\\n\\n    uint256 internal versionsNextIndex;\\n    mapping (uint256 => Version) internal versions;\\n    mapping (bytes32 => uint256) internal versionIdForSemantic;\\n    mapping (address => uint256) internal latestVersionIdForContract;\\n\\n    event NewVersion(uint256 versionId, uint16[3] semanticVersion);\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize this Repo\\n    */\\n    function initialize() public onlyInit {\\n        initialized();\\n        versionsNextIndex = 1;\\n    }\\n\\n    /**\\n    * @notice Create new version with contract `_contractAddress` and content `@fromHex(_contentURI)`\\n    * @param _newSemanticVersion Semantic version for new repo version\\n    * @param _contractAddress address for smart contract logic for version (if set to 0, it uses last versions' contractAddress)\\n    * @param _contentURI External URI for fetching new version's content\\n    */\\n    function newVersion(\\n        uint16[3] _newSemanticVersion,\\n        address _contractAddress,\\n        bytes _contentURI\\n    ) public auth(CREATE_VERSION_ROLE)\\n    {\\n        address contractAddress = _contractAddress;\\n        uint256 lastVersionIndex = versionsNextIndex - 1;\\n\\n        uint16[3] memory lastSematicVersion;\\n\\n        if (lastVersionIndex > 0) {\\n            Version storage lastVersion = versions[lastVersionIndex];\\n            lastSematicVersion = lastVersion.semanticVersion;\\n\\n            if (contractAddress == address(0)) {\\n                contractAddress = lastVersion.contractAddress;\\n            }\\n            // Only allows smart contract change on major version bumps\\n            require(\\n                lastVersion.contractAddress == contractAddress || _newSemanticVersion[0] > lastVersion.semanticVersion[0],\\n                ERROR_INVALID_VERSION\\n            );\\n        }\\n\\n        require(isValidBump(lastSematicVersion, _newSemanticVersion), ERROR_INVALID_BUMP);\\n\\n        uint256 versionId = versionsNextIndex++;\\n        versions[versionId] = Version(_newSemanticVersion, contractAddress, _contentURI);\\n        versionIdForSemantic[semanticVersionHash(_newSemanticVersion)] = versionId;\\n        latestVersionIdForContract[contractAddress] = versionId;\\n\\n        emit NewVersion(versionId, _newSemanticVersion);\\n    }\\n\\n    function getLatest() public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\\n        return getByVersionId(versionsNextIndex - 1);\\n    }\\n\\n    function getLatestForContractAddress(address _contractAddress)\\n        public\\n        view\\n        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\\n    {\\n        return getByVersionId(latestVersionIdForContract[_contractAddress]);\\n    }\\n\\n    function getBySemanticVersion(uint16[3] _semanticVersion)\\n        public\\n        view\\n        returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI)\\n    {\\n        return getByVersionId(versionIdForSemantic[semanticVersionHash(_semanticVersion)]);\\n    }\\n\\n    function getByVersionId(uint _versionId) public view returns (uint16[3] semanticVersion, address contractAddress, bytes contentURI) {\\n        require(_versionId > 0 && _versionId < versionsNextIndex, ERROR_INEXISTENT_VERSION);\\n        Version storage version = versions[_versionId];\\n        return (version.semanticVersion, version.contractAddress, version.contentURI);\\n    }\\n\\n    function getVersionsCount() public view returns (uint256) {\\n        return versionsNextIndex - 1;\\n    }\\n\\n    function isValidBump(uint16[3] _oldVersion, uint16[3] _newVersion) public pure returns (bool) {\\n        bool hasBumped;\\n        uint i = 0;\\n        while (i < 3) {\\n            if (hasBumped) {\\n                if (_newVersion[i] != 0) {\\n                    return false;\\n                }\\n            } else if (_newVersion[i] != _oldVersion[i]) {\\n                if (_oldVersion[i] > _newVersion[i] || _newVersion[i] - _oldVersion[i] != 1) {\\n                    return false;\\n                }\\n                hasBumped = true;\\n            }\\n            i++;\\n        }\\n        return hasBumped;\\n    }\\n\\n    function semanticVersionHash(uint16[3] version) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(version[0], version[1], version[2]));\\n    }\\n}\\n\",\"keccak256\":\"0x4df44671f92e5410aa0fca7f515b562784a8da63e21e8872fdf275835d5c2dd1\"},\"contracts/apps/AppProxyBase.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppProxyBase is AppStorage, DepositableDelegateProxy, KernelNamespaceConstants {\\n    /**\\n    * @dev Initialize AppProxy\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public {\\n        setKernel(_kernel);\\n        setAppId(_appId);\\n\\n        // Implicit check that kernel is actually a Kernel\\n        // The EVM doesn't actually provide a way for us to make sure, but we can force a revert to\\n        // occur if the kernel is set to 0x0 or a non-code address when we try to call a method on\\n        // it.\\n        address appCode = getAppBase(_appId);\\n\\n        // If initialize payload is provided, it will be executed\\n        if (_initializePayload.length > 0) {\\n            require(isContract(appCode));\\n            // Cannot make delegatecall as a delegateproxy.delegatedFwd as it\\n            // returns ending execution context and halts contract deployment\\n            require(appCode.delegatecall(_initializePayload));\\n        }\\n    }\\n\\n    function getAppBase(bytes32 _appId) internal view returns (address) {\\n        return kernel().getApp(KERNEL_APP_BASES_NAMESPACE, _appId);\\n    }\\n}\\n\",\"keccak256\":\"0x6d591412d30dc3d5079f8c5cab04f83ad44be376a9e4143d4a3b2067cd7a4483\"},\"contracts/apps/AppProxyPinned.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyPinned is IsContract, AppProxyBase {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.appStorage.pinnedCode\\\")\\n    bytes32 internal constant PINNED_CODE_POSITION = 0xdee64df20d65e53d7f51cb6ab6d921a0a6a638a91e942e1d8d02df28e31c038e;\\n\\n    /**\\n    * @dev Initialize AppProxyPinned (makes it an un-upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n        AppProxyBase(_kernel, _appId, _initializePayload)\\n        public // solium-disable-line visibility-first\\n    {\\n        setPinnedCode(getAppBase(_appId));\\n        require(isContract(pinnedCode()));\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return pinnedCode();\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return FORWARDING;\\n    }\\n\\n    function setPinnedCode(address _pinnedCode) internal {\\n        PINNED_CODE_POSITION.setStorageAddress(_pinnedCode);\\n    }\\n\\n    function pinnedCode() internal view returns (address) {\\n        return PINNED_CODE_POSITION.getStorageAddress();\\n    }\\n}\\n\",\"keccak256\":\"0xbe6285bcc237c696e297948be02cfad8d48812ba52d67f8947b52c0546da53b1\"},\"contracts/apps/AppProxyUpgradeable.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./AppProxyBase.sol\\\";\\n\\n\\ncontract AppProxyUpgradeable is AppProxyBase {\\n    /**\\n    * @dev Initialize AppProxyUpgradeable (makes it an upgradeable Aragon app)\\n    * @param _kernel Reference to organization kernel for the app\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Payload for call to be made after setup to initialize\\n    */\\n    constructor(IKernel _kernel, bytes32 _appId, bytes _initializePayload)\\n        AppProxyBase(_kernel, _appId, _initializePayload)\\n        public // solium-disable-line visibility-first\\n    {\\n        // solium-disable-previous-line no-empty-blocks\\n    }\\n\\n    /**\\n     * @dev ERC897, the address the proxy would delegate calls to\\n     */\\n    function implementation() public view returns (address) {\\n        return getAppBase(appId());\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n}\\n\",\"keccak256\":\"0xbcc626f70099c7e859b9c2bb8ca91e72b84f9e6783f91277e40737d51bd2c433\"},\"contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0x37324058906601970b1ef5cbe8f2af93144d3b723c2a33e468142cdc753c829b\"},\"contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n}\\n\",\"keccak256\":\"0x342fa7437cb3e80ea702209cc90787b27d21a7d4bf101e313534c9da2a2f7875\"},\"contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x42f0422744e13674e38bfbef079af7150883aba96ddbe61c5ae50df31d42696e\"},\"contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"contracts/common/DelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\ncontract DelegateProxy is ERCProxy, IsContract {\\n    uint256 internal constant FWD_GAS_LIMIT = 10000;\\n\\n    /**\\n    * @dev Performs a delegatecall and returns whatever the delegatecall returned (entire context execution will return!)\\n    * @param _dst Destination address to perform the delegatecall\\n    * @param _calldata Calldata for the delegatecall\\n    */\\n    function delegatedFwd(address _dst, bytes _calldata) internal {\\n        require(isContract(_dst));\\n        uint256 fwdGasLimit = FWD_GAS_LIMIT;\\n\\n        assembly {\\n            let result := delegatecall(sub(gas, fwdGasLimit), _dst, add(_calldata, 0x20), mload(_calldata), 0, 0)\\n            let size := returndatasize\\n            let ptr := mload(0x40)\\n            returndatacopy(ptr, 0, size)\\n\\n            // revert instead of invalid() bc if the underlying call failed with invalid() it already wasted gas.\\n            // if the call returned error data, forward it\\n            switch result case 0 { revert(ptr, size) }\\n            default { return(ptr, size) }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x381a4ab9b57abf496b337146a52d533aaf6a8247941fbc19735cbde0e891e85b\"},\"contracts/common/DepositableDelegateProxy.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./DelegateProxy.sol\\\";\\nimport \\\"./DepositableStorage.sol\\\";\\n\\n\\ncontract DepositableDelegateProxy is DepositableStorage, DelegateProxy {\\n    event ProxyDeposit(address sender, uint256 value);\\n\\n    function () external payable {\\n        uint256 forwardGasThreshold = FWD_GAS_LIMIT;\\n        bytes32 isDepositablePosition = DEPOSITABLE_POSITION;\\n\\n        // Optimized assembly implementation to prevent EIP-1884 from breaking deposits, reference code in Solidity:\\n        // https://github.com/aragon/aragonOS/blob/v4.2.1/contracts/common/DepositableDelegateProxy.sol#L10-L20\\n        assembly {\\n            // Continue only if the gas left is lower than the threshold for forwarding to the implementation code,\\n            // otherwise continue outside of the assembly block.\\n            if lt(gas, forwardGasThreshold) {\\n                // Only accept the deposit and emit an event if all of the following are true:\\n                // the proxy accepts deposits (isDepositable), msg.data.length == 0, and msg.value > 0\\n                if and(and(sload(isDepositablePosition), iszero(calldatasize)), gt(callvalue, 0)) {\\n                    // Equivalent Solidity code for emitting the event:\\n                    // emit ProxyDeposit(msg.sender, msg.value);\\n\\n                    let logData := mload(0x40) // free memory pointer\\n                    mstore(logData, caller) // add 'msg.sender' to the log data (first event param)\\n                    mstore(add(logData, 0x20), callvalue) // add 'msg.value' to the log data (second event param)\\n\\n                    // Emit an event with one topic to identify the event: keccak256('ProxyDeposit(address,uint256)') = 0x15ee...dee1\\n                    log1(logData, 0x40, 0x15eeaa57c7bd188c1388020bcadc2c436ec60d647d36ef5b9eb3c742217ddee1)\\n\\n                    stop() // Stop. Exits execution context\\n                }\\n\\n                // If any of above checks failed, revert the execution (if ETH was sent, it is returned to the sender)\\n                revert(0, 0)\\n            }\\n        }\\n\\n        address target = implementation();\\n        delegatedFwd(target, msg.data);\\n    }\\n}\\n\",\"keccak256\":\"0x80a08f88ca7051a248c6fd91283fef4b01b241d1dc97e13499f1460093ff3068\"},\"contracts/common/DepositableStorage.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract DepositableStorage {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.depositableStorage.depositable\\\")\\n    bytes32 internal constant DEPOSITABLE_POSITION = 0x665fd576fbbe6f247aff98f5c94a561e3f71ec2d3c988d56f12d342396c50cea;\\n\\n    function isDepositable() public view returns (bool) {\\n        return DEPOSITABLE_POSITION.getStorageBool();\\n    }\\n\\n    function setDepositable(bool _depositable) internal {\\n        DEPOSITABLE_POSITION.setStorageBool(_depositable);\\n    }\\n}\\n\",\"keccak256\":\"0x67e1884ba4c91de1c6fe1fc2c1c632c29ed3e7894a434c049be9f1ed80539237\"},\"contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0x6b2fa091968161075154a77fa741a3484c891d73cd3cd14ede502ff56dd08dfc\"},\"contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa8e004decf086e817a864b485473b687c2c468c82af7b5011d9908586f7cbf36\"},\"contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc859366d3143499d1458ea55cb5374ae1ca1faf41763cad5e051dea2da373ba1\"},\"contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9dd99d770a5eed901ba749e1f02e4fae443e71e899f4909f56825dfc378da089\"},\"contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0x797d3a58b782032f6afc51725326c0b51dceb00f3af6b85b25bd91cc10d22504\"},\"contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0xd89653c118bbd8cace423c45daa37986c566672198a415254011c028d1831189\"},\"contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd251a1207e1faa4c41500bf927310bb739b1fbc0bf880f236f8e0a9236d6a03a\"},\"contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0xfaba85207f0bb4bb5d7b6685a963c39a3258641bda6e523175640c3f9aeb2045\"},\"contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe497dcb85bbbf10224623247f39a4aeed7d3b230de2a811f3b69cb0e7d0a64d4\"},\"contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xea4ded621a63f988b83ac27b4a23cad0a42c3d77bcf6ca7b88681ae4ea650cf4\"},\"contracts/ens/ENSConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ENSConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant ENS_ROOT = bytes32(0);\\n    bytes32 internal constant ETH_TLD_LABEL = keccak256(\\\"eth\\\");\\n    bytes32 internal constant ETH_TLD_NODE = keccak256(abi.encodePacked(ENS_ROOT, ETH_TLD_LABEL));\\n    bytes32 internal constant PUBLIC_RESOLVER_LABEL = keccak256(\\\"resolver\\\");\\n    bytes32 internal constant PUBLIC_RESOLVER_NODE = keccak256(abi.encodePacked(ETH_TLD_NODE, PUBLIC_RESOLVER_LABEL));\\n    */\\n    bytes32 internal constant ENS_ROOT = bytes32(0);\\n    bytes32 internal constant ETH_TLD_LABEL = 0x4f5b812789fc606be1b3b16908db13fc7a9adf7ca72641f84d75b47069d3d7f0;\\n    bytes32 internal constant ETH_TLD_NODE = 0x93cdeb708b7545dc668eb9280176169d1c33cfd8ed6f04690a0bcc88a93fc4ae;\\n    bytes32 internal constant PUBLIC_RESOLVER_LABEL = 0x329539a1d23af1810c48a07fe7fc66a3b34fbc8b37e9b3cdb97bb88ceab7e4bf;\\n    bytes32 internal constant PUBLIC_RESOLVER_NODE = 0xfdd5d5de6dd63db72bbc2d487944ba13bf775b50a80805fe6fcaba9b0fba88f5;\\n}\\n\",\"keccak256\":\"0xbe3fd8edef616224482756562d30b3ed7e19d39115f9a6ef5bb86c7ed9c7ea81\"},\"contracts/ens/ENSSubdomainRegistrar.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../lib/ens/AbstractENS.sol\\\";\\nimport \\\"../lib/ens/PublicResolver.sol\\\";\\nimport \\\"./ENSConstants.sol\\\";\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract ENSSubdomainRegistrar is AragonApp, ENSConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant CREATE_NAME_ROLE = keccak256(\\\"CREATE_NAME_ROLE\\\");\\n    bytes32 public constant DELETE_NAME_ROLE = keccak256(\\\"DELETE_NAME_ROLE\\\");\\n    bytes32 public constant POINT_ROOTNODE_ROLE = keccak256(\\\"POINT_ROOTNODE_ROLE\\\");\\n    */\\n    bytes32 public constant CREATE_NAME_ROLE = 0xf86bc2abe0919ab91ef714b2bec7c148d94f61fdb069b91a6cfe9ecdee1799ba;\\n    bytes32 public constant DELETE_NAME_ROLE = 0x03d74c8724218ad4a99859bcb2d846d39999449fd18013dd8d69096627e68622;\\n    bytes32 public constant POINT_ROOTNODE_ROLE = 0x9ecd0e7bddb2e241c41b595a436c4ea4fd33c9fa0caa8056acf084fc3aa3bfbe;\\n\\n    string private constant ERROR_NO_NODE_OWNERSHIP = \\\"ENSSUB_NO_NODE_OWNERSHIP\\\";\\n    string private constant ERROR_NAME_EXISTS = \\\"ENSSUB_NAME_EXISTS\\\";\\n    string private constant ERROR_NAME_DOESNT_EXIST = \\\"ENSSUB_DOESNT_EXIST\\\";\\n\\n    AbstractENS public ens;\\n    bytes32 public rootNode;\\n\\n    event NewName(bytes32 indexed node, bytes32 indexed label);\\n    event DeleteName(bytes32 indexed node, bytes32 indexed label);\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized. This contract must be the owner of the `_rootNode` node so that it can create subdomains.\\n    * @notice Initialize this ENSSubdomainRegistrar instance with `_ens` as the root ENS registry and `_rootNode` as the node to allocate subdomains under\\n    * @param _ens Address of ENS registry\\n    * @param _rootNode Node to allocate subdomains under\\n    */\\n    function initialize(AbstractENS _ens, bytes32 _rootNode) public onlyInit {\\n        initialized();\\n\\n        // We need ownership to create subnodes\\n        require(_ens.owner(_rootNode) == address(this), ERROR_NO_NODE_OWNERSHIP);\\n\\n        ens = _ens;\\n        rootNode = _rootNode;\\n    }\\n\\n    /**\\n    * @notice Create a new ENS subdomain record for `_label` and assign ownership to `_owner`\\n    * @param _label Label of new subdomain\\n    * @param _owner Owner of new subdomain\\n    * @return node Hash of created node\\n    */\\n    function createName(bytes32 _label, address _owner) external auth(CREATE_NAME_ROLE) returns (bytes32 node) {\\n        return _createName(_label, _owner);\\n    }\\n\\n    /**\\n    * @notice Create a new ENS subdomain record for `_label` that resolves to `_target` and is owned by this ENSSubdomainRegistrar\\n    * @param _label Label of new subdomain\\n    * @param _target Ethereum address this new subdomain label will point to\\n    * @return node Hash of created node\\n    */\\n    function createNameAndPoint(bytes32 _label, address _target) external auth(CREATE_NAME_ROLE) returns (bytes32 node) {\\n        node = _createName(_label, this);\\n        _pointToResolverAndResolve(node, _target);\\n    }\\n\\n    /**\\n    * @notice Deregister ENS subdomain record for `_label`\\n    * @param _label Label of subdomain to deregister\\n    */\\n    function deleteName(bytes32 _label) external auth(DELETE_NAME_ROLE) {\\n        bytes32 node = getNodeForLabel(_label);\\n\\n        address currentOwner = ens.owner(node);\\n\\n        require(currentOwner != address(0), ERROR_NAME_DOESNT_EXIST); // fail if deleting unset name\\n\\n        if (currentOwner != address(this)) { // needs to reclaim ownership so it can set resolver\\n            ens.setSubnodeOwner(rootNode, _label, this);\\n        }\\n\\n        ens.setResolver(node, address(0)); // remove resolver so it ends resolving\\n        ens.setOwner(node, address(0));\\n\\n        emit DeleteName(node, _label);\\n    }\\n\\n    /**\\n    * @notice Resolve this ENSSubdomainRegistrar's root node to `_target`\\n    * @param _target Ethereum address root node will point to\\n    */\\n    function pointRootNode(address _target) external auth(POINT_ROOTNODE_ROLE) {\\n        _pointToResolverAndResolve(rootNode, _target);\\n    }\\n\\n    function _createName(bytes32 _label, address _owner) internal returns (bytes32 node) {\\n        node = getNodeForLabel(_label);\\n        require(ens.owner(node) == address(0), ERROR_NAME_EXISTS); // avoid name reset\\n\\n        ens.setSubnodeOwner(rootNode, _label, _owner);\\n\\n        emit NewName(node, _label);\\n\\n        return node;\\n    }\\n\\n    function _pointToResolverAndResolve(bytes32 _node, address _target) internal {\\n        address publicResolver = getAddr(PUBLIC_RESOLVER_NODE);\\n        ens.setResolver(_node, publicResolver);\\n\\n        PublicResolver(publicResolver).setAddr(_node, _target);\\n    }\\n\\n    function getAddr(bytes32 node) internal view returns (address) {\\n        address resolver = ens.resolver(node);\\n        return PublicResolver(resolver).addr(node);\\n    }\\n\\n    function getNodeForLabel(bytes32 _label) internal view returns (bytes32) {\\n        return keccak256(abi.encodePacked(rootNode, _label));\\n    }\\n}\\n\",\"keccak256\":\"0xea224e67eb8422188a47920b810e0c3751239c4d98fffa8b61d88e94a049861b\"},\"contracts/evmscript/EVMScriptRegistry.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AragonApp.sol\\\";\\nimport \\\"./ScriptHelpers.sol\\\";\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\n\\n/* solium-disable function-order */\\n// Allow public initialize() to be first\\ncontract EVMScriptRegistry is IEVMScriptRegistry, EVMScriptRegistryConstants, AragonApp {\\n    using ScriptHelpers for bytes;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = keccak256(\\\"REGISTRY_ADD_EXECUTOR_ROLE\\\");\\n    bytes32 public constant REGISTRY_MANAGER_ROLE = keccak256(\\\"REGISTRY_MANAGER_ROLE\\\");\\n    */\\n    bytes32 public constant REGISTRY_ADD_EXECUTOR_ROLE = 0xc4e90f38eea8c4212a009ca7b8947943ba4d4a58d19b683417f65291d1cd9ed2;\\n    // WARN: Manager can censor all votes and the like happening in an org\\n    bytes32 public constant REGISTRY_MANAGER_ROLE = 0xf7a450ef335e1892cb42c8ca72e7242359d7711924b75db5717410da3f614aa3;\\n\\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\\n\\n    string private constant ERROR_INEXISTENT_EXECUTOR = \\\"EVMREG_INEXISTENT_EXECUTOR\\\";\\n    string private constant ERROR_EXECUTOR_ENABLED = \\\"EVMREG_EXECUTOR_ENABLED\\\";\\n    string private constant ERROR_EXECUTOR_DISABLED = \\\"EVMREG_EXECUTOR_DISABLED\\\";\\n    string private constant ERROR_SCRIPT_LENGTH_TOO_SHORT = \\\"EVMREG_SCRIPT_LENGTH_TOO_SHORT\\\";\\n\\n    struct ExecutorEntry {\\n        IEVMScriptExecutor executor;\\n        bool enabled;\\n    }\\n\\n    uint256 private executorsNextIndex;\\n    mapping (uint256 => ExecutorEntry) public executors;\\n\\n    event EnableExecutor(uint256 indexed executorId, address indexed executorAddress);\\n    event DisableExecutor(uint256 indexed executorId, address indexed executorAddress);\\n\\n    modifier executorExists(uint256 _executorId) {\\n        require(_executorId > 0 && _executorId < executorsNextIndex, ERROR_INEXISTENT_EXECUTOR);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize the registry\\n    */\\n    function initialize() public onlyInit {\\n        initialized();\\n        // Create empty record to begin executor IDs at 1\\n        executorsNextIndex = 1;\\n    }\\n\\n    /**\\n    * @notice Add a new script executor with address `_executor` to the registry\\n    * @param _executor Address of the IEVMScriptExecutor that will be added to the registry\\n    * @return id Identifier of the executor in the registry\\n    */\\n    function addScriptExecutor(IEVMScriptExecutor _executor) external auth(REGISTRY_ADD_EXECUTOR_ROLE) returns (uint256 id) {\\n        uint256 executorId = executorsNextIndex++;\\n        executors[executorId] = ExecutorEntry(_executor, true);\\n        emit EnableExecutor(executorId, _executor);\\n        return executorId;\\n    }\\n\\n    /**\\n    * @notice Disable script executor with ID `_executorId`\\n    * @param _executorId Identifier of the executor in the registry\\n    */\\n    function disableScriptExecutor(uint256 _executorId)\\n        external\\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\\n    {\\n        // Note that we don't need to check for an executor's existence in this case, as only\\n        // existing executors can be enabled\\n        ExecutorEntry storage executorEntry = executors[_executorId];\\n        require(executorEntry.enabled, ERROR_EXECUTOR_DISABLED);\\n        executorEntry.enabled = false;\\n        emit DisableExecutor(_executorId, executorEntry.executor);\\n    }\\n\\n    /**\\n    * @notice Enable script executor with ID `_executorId`\\n    * @param _executorId Identifier of the executor in the registry\\n    */\\n    function enableScriptExecutor(uint256 _executorId)\\n        external\\n        authP(REGISTRY_MANAGER_ROLE, arr(_executorId))\\n        executorExists(_executorId)\\n    {\\n        ExecutorEntry storage executorEntry = executors[_executorId];\\n        require(!executorEntry.enabled, ERROR_EXECUTOR_ENABLED);\\n        executorEntry.enabled = true;\\n        emit EnableExecutor(_executorId, executorEntry.executor);\\n    }\\n\\n    /**\\n    * @dev Get the script executor that can execute a particular script based on its first 4 bytes\\n    * @param _script EVMScript being inspected\\n    */\\n    function getScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        require(_script.length >= SCRIPT_START_LOCATION, ERROR_SCRIPT_LENGTH_TOO_SHORT);\\n        uint256 id = _script.getSpecId();\\n\\n        // Note that we don't need to check for an executor's existence in this case, as only\\n        // existing executors can be enabled\\n        ExecutorEntry storage entry = executors[id];\\n        return entry.enabled ? entry.executor : IEVMScriptExecutor(0);\\n    }\\n}\\n\",\"keccak256\":\"0x0a8a940995af70625b926c4a70f3d847841f7da2601087436e3bae9b41af76c4\"},\"contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xf8b4ccf7ee558224c155604a4a0b5cc35715367cda5010fb38e21d63ec5236c9\"},\"contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x76ad18a278e36e14147f5b58a1157de67ce95f28813f3e1eacfedaaf53dd33b9\"},\"contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x66b255ac1537765d6e79cc0ed02df004e7bf214863773901e207baafd59dc2ce\"},\"contracts/evmscript/ScriptHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary ScriptHelpers {\\n    function getSpecId(bytes _script) internal pure returns (uint32) {\\n        return uint32At(_script, 0);\\n    }\\n\\n    function uint256At(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := mload(add(_data, add(0x20, _location)))\\n        }\\n    }\\n\\n    function addressAt(bytes _data, uint256 _location) internal pure returns (address result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000),\\n            0x1000000000000000000000000)\\n        }\\n    }\\n\\n    function uint32At(bytes _data, uint256 _location) internal pure returns (uint32 result) {\\n        uint256 word = uint256At(_data, _location);\\n\\n        assembly {\\n            result := div(and(word, 0xffffffff00000000000000000000000000000000000000000000000000000000),\\n            0x100000000000000000000000000000000000000000000000000000000)\\n        }\\n    }\\n\\n    function locationOf(bytes _data, uint256 _location) internal pure returns (uint256 result) {\\n        assembly {\\n            result := add(_data, add(0x20, _location))\\n        }\\n    }\\n\\n    function toBytes(bytes4 _sig) internal pure returns (bytes) {\\n        bytes memory payload = new bytes(4);\\n        assembly { mstore(add(payload, 0x20), _sig) }\\n        return payload;\\n    }\\n}\\n\",\"keccak256\":\"0x2a3c77b540a4f8fdd657a4a77614b4a3675588527ce4d935684ea93e5f60a0b7\"},\"contracts/evmscript/executors/BaseEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../../common/Autopetrified.sol\\\";\\nimport \\\"../IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract BaseEVMScriptExecutor is IEVMScriptExecutor, Autopetrified {\\n    uint256 internal constant SCRIPT_START_LOCATION = 4;\\n}\\n\",\"keccak256\":\"0x96b64e6c5ccd7e80171a6ae2d84dddf0a4d96225f70c5b7ce8c48bd35c3869b2\"},\"contracts/evmscript/executors/CallsScript.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n// Inspired by https://github.com/reverendus/tx-manager\\n\\nimport \\\"../ScriptHelpers.sol\\\";\\nimport \\\"./BaseEVMScriptExecutor.sol\\\";\\n\\n\\ncontract CallsScript is BaseEVMScriptExecutor {\\n    using ScriptHelpers for bytes;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EXECUTOR_TYPE = keccak256(\\\"CALLS_SCRIPT\\\");\\n    */\\n    bytes32 internal constant EXECUTOR_TYPE = 0x2dc858a00f3e417be1394b87c07158e989ec681ce8cc68a9093680ac1a870302;\\n\\n    string private constant ERROR_BLACKLISTED_CALL = \\\"EVMCALLS_BLACKLISTED_CALL\\\";\\n    string private constant ERROR_INVALID_LENGTH = \\\"EVMCALLS_INVALID_LENGTH\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_CALL_REVERTED = \\\"EVMCALLS_CALL_REVERTED\\\";\\n    */\\n\\n    event LogScriptCall(address indexed sender, address indexed src, address indexed dst);\\n\\n    /**\\n    * @notice Executes a number of call scripts\\n    * @param _script [ specId (uint32) ] many calls with this structure ->\\n    *    [ to (address: 20 bytes) ] [ calldataLength (uint32: 4 bytes) ] [ calldata (calldataLength bytes) ]\\n    * @param _blacklist Addresses the script cannot call to, or will revert.\\n    * @return Always returns empty byte array\\n    */\\n    function execScript(bytes _script, bytes, address[] _blacklist) external isInitialized returns (bytes) {\\n        uint256 location = SCRIPT_START_LOCATION; // first 32 bits are spec id\\n        while (location < _script.length) {\\n            // Check there's at least address + calldataLength available\\n            require(_script.length - location >= 0x18, ERROR_INVALID_LENGTH);\\n\\n            address contractAddress = _script.addressAt(location);\\n            // Check address being called is not blacklist\\n            for (uint256 i = 0; i < _blacklist.length; i++) {\\n                require(contractAddress != _blacklist[i], ERROR_BLACKLISTED_CALL);\\n            }\\n\\n            // logged before execution to ensure event ordering in receipt\\n            // if failed entire execution is reverted regardless\\n            emit LogScriptCall(msg.sender, address(this), contractAddress);\\n\\n            uint256 calldataLength = uint256(_script.uint32At(location + 0x14));\\n            uint256 startOffset = location + 0x14 + 0x04;\\n            uint256 calldataStart = _script.locationOf(startOffset);\\n\\n            // compute end of script / next location\\n            location = startOffset + calldataLength;\\n            require(location <= _script.length, ERROR_INVALID_LENGTH);\\n\\n            bool success;\\n            assembly {\\n                success := call(\\n                    sub(gas, 5000),       // forward gas left - 5000\\n                    contractAddress,      // address\\n                    0,                    // no value\\n                    calldataStart,        // calldata start\\n                    calldataLength,       // calldata length\\n                    0,                    // don't write output\\n                    0                     // don't write output\\n                )\\n\\n                switch success\\n                case 0 {\\n                    let ptr := mload(0x40)\\n\\n                    switch returndatasize\\n                    case 0 {\\n                        // No error data was returned, revert with \\\"EVMCALLS_CALL_REVERTED\\\"\\n                        // See remix: doing a `revert(\\\"EVMCALLS_CALL_REVERTED\\\")` always results in\\n                        // this memory layout\\n                        mstore(ptr, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                        mstore(add(ptr, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                        mstore(add(ptr, 0x24), 0x0000000000000000000000000000000000000000000000000000000000000016) // reason length\\n                        mstore(add(ptr, 0x44), 0x45564d43414c4c535f43414c4c5f524556455254454400000000000000000000) // reason\\n\\n                        revert(ptr, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                    }\\n                    default {\\n                        // Forward the full error data\\n                        returndatacopy(ptr, 0, returndatasize)\\n                        revert(ptr, returndatasize)\\n                    }\\n                }\\n                default { }\\n            }\\n        }\\n        // No need to allocate empty bytes for the return as this can only be called via an delegatecall\\n        // (due to the isInitialized modifier)\\n    }\\n\\n    function executorType() external pure returns (bytes32) {\\n        return EXECUTOR_TYPE;\\n    }\\n}\\n\",\"keccak256\":\"0xc7078b505c6e458b5d4d7d47df87245b3bdb96f8c21d2b93669d6b5251456a2c\"},\"contracts/factory/APMRegistryFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\nimport \\\"../apm/APMRegistry.sol\\\";\\nimport \\\"../apm/Repo.sol\\\";\\nimport \\\"../ens/ENSSubdomainRegistrar.sol\\\";\\n\\nimport \\\"./DAOFactory.sol\\\";\\nimport \\\"./ENSFactory.sol\\\";\\nimport \\\"./AppProxyFactory.sol\\\";\\n\\n\\ncontract APMRegistryFactory is APMInternalAppNames {\\n    DAOFactory public daoFactory;\\n    APMRegistry public registryBase;\\n    Repo public repoBase;\\n    ENSSubdomainRegistrar public ensSubdomainRegistrarBase;\\n    ENS public ens;\\n\\n    event DeployAPM(bytes32 indexed node, address apm);\\n\\n    /**\\n    * @notice Create a new factory for deploying Aragon Package Managers (aragonPM)\\n    * @dev Requires either a given ENS registrar or ENSFactory (used for generating a new ENS in test environments).\\n    * @param _daoFactory Base factory for deploying DAOs\\n    * @param _registryBase APMRegistry base contract location\\n    * @param _repoBase Repo base contract location\\n    * @param _ensSubBase ENSSubdomainRegistrar base contract location\\n    * @param _ens ENS instance\\n    * @param _ensFactory ENSFactory (used to generated a new ENS if no ENS is given)\\n    */\\n    constructor(\\n        DAOFactory _daoFactory,\\n        APMRegistry _registryBase,\\n        Repo _repoBase,\\n        ENSSubdomainRegistrar _ensSubBase,\\n        ENS _ens,\\n        ENSFactory _ensFactory\\n    ) public // DAO initialized without evmscript run support\\n    {\\n        daoFactory = _daoFactory;\\n        registryBase = _registryBase;\\n        repoBase = _repoBase;\\n        ensSubdomainRegistrarBase = _ensSubBase;\\n\\n        // Either the ENS address provided is used, if any.\\n        // Or we use the ENSFactory to generate a test instance of ENS\\n        // If not the ENS address nor factory address are provided, this will revert\\n        ens = _ens != address(0) ? _ens : _ensFactory.newENS(this);\\n    }\\n\\n    /**\\n    * @notice Create a new Aragon Package Manager (aragonPM) DAO, holding the `_label` subdomain from parent `_tld` and controlled by `_root`\\n    * @param _tld The parent node of the controlled subdomain\\n    * @param _label The subdomain label\\n    * @param _root Manager for the new aragonPM DAO\\n    * @return The new aragonPM's APMRegistry app\\n    */\\n    function newAPM(bytes32 _tld, bytes32 _label, address _root) public returns (APMRegistry) {\\n        bytes32 node = keccak256(abi.encodePacked(_tld, _label));\\n\\n        // Assume it is the test ENS\\n        if (ens.owner(node) != address(this)) {\\n            // If we weren't in test ens and factory doesn't have ownership, will fail\\n            require(ens.owner(_tld) == address(this));\\n            ens.setSubnodeOwner(_tld, _label, this);\\n        }\\n\\n        Kernel dao = daoFactory.newDAO(this);\\n        ACL acl = ACL(dao.acl());\\n\\n        acl.createPermission(this, dao, dao.APP_MANAGER_ROLE(), this);\\n\\n        // Deploy app proxies\\n        bytes memory noInit = new bytes(0);\\n        ENSSubdomainRegistrar ensSub = ENSSubdomainRegistrar(\\n            dao.newAppInstance(\\n                keccak256(abi.encodePacked(node, keccak256(abi.encodePacked(ENS_SUB_APP_NAME)))),\\n                ensSubdomainRegistrarBase,\\n                noInit,\\n                false\\n            )\\n        );\\n        APMRegistry apm = APMRegistry(\\n            dao.newAppInstance(\\n                keccak256(abi.encodePacked(node, keccak256(abi.encodePacked(APM_APP_NAME)))),\\n                registryBase,\\n                noInit,\\n                false\\n            )\\n        );\\n\\n        // APMRegistry controls Repos\\n        bytes32 repoAppId = keccak256(abi.encodePacked(node, keccak256(abi.encodePacked(REPO_APP_NAME))));\\n        dao.setApp(dao.APP_BASES_NAMESPACE(), repoAppId, repoBase);\\n\\n        emit DeployAPM(node, apm);\\n\\n        // Grant permissions needed for APM on ENSSubdomainRegistrar\\n        acl.createPermission(apm, ensSub, ensSub.CREATE_NAME_ROLE(), _root);\\n        acl.createPermission(apm, ensSub, ensSub.POINT_ROOTNODE_ROLE(), _root);\\n\\n        // allow apm to create permissions for Repos in Kernel\\n        bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\\n\\n        acl.grantPermission(apm, acl, permRole);\\n\\n        // Initialize\\n        ens.setOwner(node, ensSub);\\n        ensSub.initialize(ens, node);\\n        apm.initialize(ensSub);\\n\\n        uint16[3] memory firstVersion;\\n        firstVersion[0] = 1;\\n\\n        acl.createPermission(this, apm, apm.CREATE_REPO_ROLE(), this);\\n\\n        apm.newRepoWithVersion(APM_APP_NAME, _root, firstVersion, registryBase, b(\\\"ipfs:apm\\\"));\\n        apm.newRepoWithVersion(ENS_SUB_APP_NAME, _root, firstVersion, ensSubdomainRegistrarBase, b(\\\"ipfs:enssub\\\"));\\n        apm.newRepoWithVersion(REPO_APP_NAME, _root, firstVersion, repoBase, b(\\\"ipfs:repo\\\"));\\n\\n        configureAPMPermissions(acl, apm, _root);\\n\\n        // Permission transition to _root\\n        acl.setPermissionManager(_root, dao, dao.APP_MANAGER_ROLE());\\n        acl.revokePermission(this, acl, permRole);\\n        acl.grantPermission(_root, acl, permRole);\\n        acl.setPermissionManager(_root, acl, permRole);\\n\\n        return apm;\\n    }\\n\\n    function b(string memory x) internal pure returns (bytes memory y) {\\n        y = bytes(x);\\n    }\\n\\n    // Factory can be subclassed and permissions changed\\n    function configureAPMPermissions(ACL _acl, APMRegistry _apm, address _root) internal {\\n        _acl.grantPermission(_root, _apm, _apm.CREATE_REPO_ROLE());\\n        _acl.setPermissionManager(_root, _apm, _apm.CREATE_REPO_ROLE());\\n    }\\n}\\n\",\"keccak256\":\"0x716115b401cb9e86acfe80072b3d3a87fc7ed1ae146beff81b69c28c098f28ec\"},\"contracts/factory/AppProxyFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../apps/AppProxyUpgradeable.sol\\\";\\nimport \\\"../apps/AppProxyPinned.sol\\\";\\n\\n\\ncontract AppProxyFactory {\\n    event NewAppProxy(address proxy, bool isUpgradeable, bytes32 appId);\\n\\n    /**\\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyUpgradeable\\n    */\\n    function newAppProxy(IKernel _kernel, bytes32 _appId) public returns (AppProxyUpgradeable) {\\n        return newAppProxy(_kernel, _appId, new bytes(0));\\n    }\\n\\n    /**\\n    * @notice Create a new upgradeable app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyUpgradeable\\n    */\\n    function newAppProxy(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyUpgradeable) {\\n        AppProxyUpgradeable proxy = new AppProxyUpgradeable(_kernel, _appId, _initializePayload);\\n        emit NewAppProxy(address(proxy), true, _appId);\\n        return proxy;\\n    }\\n\\n    /**\\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @return AppProxyPinned\\n    */\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId) public returns (AppProxyPinned) {\\n        return newAppProxyPinned(_kernel, _appId, new bytes(0));\\n    }\\n\\n    /**\\n    * @notice Create a new pinned app instance on `_kernel` with identifier `_appId` and initialization payload `_initializePayload`\\n    * @param _kernel App's Kernel reference\\n    * @param _appId Identifier for app\\n    * @param _initializePayload Proxy initialization payload\\n    * @return AppProxyPinned\\n    */\\n    function newAppProxyPinned(IKernel _kernel, bytes32 _appId, bytes _initializePayload) public returns (AppProxyPinned) {\\n        AppProxyPinned proxy = new AppProxyPinned(_kernel, _appId, _initializePayload);\\n        emit NewAppProxy(address(proxy), false, _appId);\\n        return proxy;\\n    }\\n}\\n\",\"keccak256\":\"0x94e88f4e8747be9487e32069eb22c1455ffc49cfd1299ef1eba212049c2db115\"},\"contracts/factory/DAOFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\nimport \\\"../kernel/Kernel.sol\\\";\\nimport \\\"../kernel/KernelProxy.sol\\\";\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\n\\nimport \\\"./EVMScriptRegistryFactory.sol\\\";\\n\\n\\ncontract DAOFactory {\\n    IKernel public baseKernel;\\n    IACL public baseACL;\\n    EVMScriptRegistryFactory public regFactory;\\n\\n    event DeployDAO(address dao);\\n    event DeployEVMScriptRegistry(address reg);\\n\\n    /**\\n    * @notice Create a new DAOFactory, creating DAOs with Kernels proxied to `_baseKernel`, ACLs proxied to `_baseACL`, and new EVMScriptRegistries created from `_regFactory`.\\n    * @param _baseKernel Base Kernel\\n    * @param _baseACL Base ACL\\n    * @param _regFactory EVMScriptRegistry factory\\n    */\\n    constructor(IKernel _baseKernel, IACL _baseACL, EVMScriptRegistryFactory _regFactory) public {\\n        // No need to init as it cannot be killed by devops199\\n        if (address(_regFactory) != address(0)) {\\n            regFactory = _regFactory;\\n        }\\n\\n        baseKernel = _baseKernel;\\n        baseACL = _baseACL;\\n    }\\n\\n    /**\\n    * @notice Create a new DAO with `_root` set as the initial admin\\n    * @param _root Address that will be granted control to setup DAO permissions\\n    * @return Newly created DAO\\n    */\\n    function newDAO(address _root) public returns (Kernel) {\\n        Kernel dao = Kernel(new KernelProxy(baseKernel));\\n\\n        if (address(regFactory) == address(0)) {\\n            dao.initialize(baseACL, _root);\\n        } else {\\n            dao.initialize(baseACL, this);\\n\\n            ACL acl = ACL(dao.acl());\\n            bytes32 permRole = acl.CREATE_PERMISSIONS_ROLE();\\n            bytes32 appManagerRole = dao.APP_MANAGER_ROLE();\\n\\n            acl.grantPermission(regFactory, acl, permRole);\\n\\n            acl.createPermission(regFactory, dao, appManagerRole, this);\\n\\n            EVMScriptRegistry reg = regFactory.newEVMScriptRegistry(dao);\\n            emit DeployEVMScriptRegistry(address(reg));\\n\\n            // Clean up permissions\\n            // First, completely reset the APP_MANAGER_ROLE\\n            acl.revokePermission(regFactory, dao, appManagerRole);\\n            acl.removePermissionManager(dao, appManagerRole);\\n\\n            // Then, make root the only holder and manager of CREATE_PERMISSIONS_ROLE\\n            acl.revokePermission(regFactory, acl, permRole);\\n            acl.revokePermission(this, acl, permRole);\\n            acl.grantPermission(_root, acl, permRole);\\n            acl.setPermissionManager(_root, acl, permRole);\\n        }\\n\\n        emit DeployDAO(address(dao));\\n\\n        return dao;\\n    }\\n}\\n\",\"keccak256\":\"0x606c9813487fba0c479b0e5b2bc077bab428d6c24b480936c5172bfb9d5598b6\"},\"contracts/factory/ENSFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../lib/ens/ENS.sol\\\";\\nimport \\\"../lib/ens/PublicResolver.sol\\\";\\nimport \\\"../ens/ENSConstants.sol\\\";\\n\\n\\n// WARNING: This is an incredibly trustful ENS deployment, do NOT use in production!\\n// This contract is NOT meant to be deployed to a live network.\\n// Its only purpose is to easily create ENS instances for testing aragonPM.\\ncontract ENSFactory is ENSConstants {\\n    event DeployENS(address ens);\\n\\n    /**\\n    * @notice Create a new ENS and set `_owner` as the owner of the top level domain.\\n    * @param _owner Owner of .eth\\n    * @return ENS\\n    */\\n    function newENS(address _owner) public returns (ENS) {\\n        ENS ens = new ENS();\\n\\n        // Setup .eth TLD\\n        ens.setSubnodeOwner(ENS_ROOT, ETH_TLD_LABEL, this);\\n\\n        // Setup public resolver\\n        PublicResolver resolver = new PublicResolver(ens);\\n        ens.setSubnodeOwner(ETH_TLD_NODE, PUBLIC_RESOLVER_LABEL, this);\\n        ens.setResolver(PUBLIC_RESOLVER_NODE, resolver);\\n        resolver.setAddr(PUBLIC_RESOLVER_NODE, resolver);\\n\\n        ens.setOwner(ETH_TLD_NODE, _owner);\\n        ens.setOwner(ENS_ROOT, _owner);\\n\\n        emit DeployENS(ens);\\n\\n        return ens;\\n    }\\n}\\n\",\"keccak256\":\"0xe0e5a1884a83996f80804ae6ac23de1a217477ef2e2c3e54954d1bbcf52382c4\"},\"contracts/factory/EVMScriptRegistryFactory.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"../evmscript/IEVMScriptExecutor.sol\\\";\\nimport \\\"../evmscript/EVMScriptRegistry.sol\\\";\\n\\nimport \\\"../evmscript/executors/CallsScript.sol\\\";\\n\\nimport \\\"../kernel/Kernel.sol\\\";\\nimport \\\"../acl/ACL.sol\\\";\\n\\n\\ncontract EVMScriptRegistryFactory is EVMScriptRegistryConstants {\\n    EVMScriptRegistry public baseReg;\\n    IEVMScriptExecutor public baseCallScript;\\n\\n    /**\\n    * @notice Create a new EVMScriptRegistryFactory.\\n    */\\n    constructor() public {\\n        baseReg = new EVMScriptRegistry();\\n        baseCallScript = IEVMScriptExecutor(new CallsScript());\\n    }\\n\\n    /**\\n    * @notice Install a new pinned instance of EVMScriptRegistry on `_dao`.\\n    * @param _dao Kernel\\n    * @return Installed EVMScriptRegistry\\n    */\\n    function newEVMScriptRegistry(Kernel _dao) public returns (EVMScriptRegistry reg) {\\n        bytes memory initPayload = abi.encodeWithSelector(reg.initialize.selector);\\n        reg = EVMScriptRegistry(_dao.newPinnedAppInstance(EVMSCRIPT_REGISTRY_APP_ID, baseReg, initPayload, true));\\n\\n        ACL acl = ACL(_dao.acl());\\n\\n        acl.createPermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE(), this);\\n\\n        reg.addScriptExecutor(baseCallScript);     // spec 1 = CallsScript\\n\\n        // Clean up the permissions\\n        acl.revokePermission(this, reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\\n        acl.removePermissionManager(reg, reg.REGISTRY_ADD_EXECUTOR_ROLE());\\n\\n        return reg;\\n    }\\n}\\n\",\"keccak256\":\"0xf879b2069ae82e266b79c48bde64a6f1f051bdc5c566cf01e0cc2e8844c381a7\"},\"contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0x96e9fd607b156a96905ec0108bb4fbcc5ad85212bb98e03600069bb5727d2daa\"},\"contracts/kernel/Kernel.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelConstants.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\nimport \\\"../common/Petrifiable.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../factory/AppProxyFactory.sol\\\";\\nimport \\\"../lib/misc/ERCProxy.sol\\\";\\n\\n\\n// solium-disable-next-line max-len\\ncontract Kernel is IKernel, KernelStorage, KernelAppIds, KernelNamespaceConstants, Petrifiable, IsContract, VaultRecoverable, AppProxyFactory, ACLSyntaxSugar {\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant APP_MANAGER_ROLE = keccak256(\\\"APP_MANAGER_ROLE\\\");\\n    */\\n    bytes32 public constant APP_MANAGER_ROLE = 0xb6d92708f3d4817afc106147d969e229ced5c46e65e0a5002a0d391287762bd0;\\n\\n    string private constant ERROR_APP_NOT_CONTRACT = \\\"KERNEL_APP_NOT_CONTRACT\\\";\\n    string private constant ERROR_INVALID_APP_CHANGE = \\\"KERNEL_INVALID_APP_CHANGE\\\";\\n    string private constant ERROR_AUTH_FAILED = \\\"KERNEL_AUTH_FAILED\\\";\\n\\n    /**\\n    * @dev Constructor that allows the deployer to choose if the base instance should be petrified immediately.\\n    * @param _shouldPetrify Immediately petrify this instance so that it can never be initialized\\n    */\\n    constructor(bool _shouldPetrify) public {\\n        if (_shouldPetrify) {\\n            petrify();\\n        }\\n    }\\n\\n    /**\\n    * @dev Initialize can only be called once. It saves the block number in which it was initialized.\\n    * @notice Initialize this kernel instance along with its ACL and set `_permissionsCreator` as the entity that can create other permissions\\n    * @param _baseAcl Address of base ACL app\\n    * @param _permissionsCreator Entity that will be given permission over createPermission\\n    */\\n    function initialize(IACL _baseAcl, address _permissionsCreator) public onlyInit {\\n        initialized();\\n\\n        // Set ACL base\\n        _setApp(KERNEL_APP_BASES_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, _baseAcl);\\n\\n        // Create ACL instance and attach it as the default ACL app\\n        IACL acl = IACL(newAppProxy(this, KERNEL_DEFAULT_ACL_APP_ID));\\n        acl.initialize(_permissionsCreator);\\n        _setApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID, acl);\\n\\n        recoveryVaultAppId = KERNEL_DEFAULT_VAULT_APP_ID;\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel\\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _appId, address _appBase)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        return newAppInstance(_appId, _appBase, new bytes(0), false);\\n    }\\n\\n    /**\\n    * @dev Create a new instance of an app linked to this kernel and set its base\\n    *      implementation if it was not already set\\n    * @notice Create a new upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\\n        appProxy = newAppProxy(this, _appId, _initializePayload);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel\\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`.\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _appId, address _appBase)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        return newPinnedAppInstance(_appId, _appBase, new bytes(0), false);\\n    }\\n\\n    /**\\n    * @dev Create a new pinned instance of an app linked to this kernel and set\\n    *      its base implementation if it was not already set\\n    * @notice Create a new non-upgradeable instance of `_appId` app linked to the Kernel, setting its code to `_appBase`. `_setDefault ? 'Also sets it as the default app instance.':''`\\n    * @param _appId Identifier for app\\n    * @param _appBase Address of the app's base implementation\\n    * @param _initializePayload Payload for call made by the proxy during its construction to initialize\\n    * @param _setDefault Whether the app proxy app is the default one.\\n    *        Useful when the Kernel needs to know of an instance of a particular app,\\n    *        like Vault for escape hatch mechanism.\\n    * @return AppProxy instance\\n    */\\n    function newPinnedAppInstance(bytes32 _appId, address _appBase, bytes _initializePayload, bool _setDefault)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_BASES_NAMESPACE, _appId))\\n        returns (ERCProxy appProxy)\\n    {\\n        _setAppIfNew(KERNEL_APP_BASES_NAMESPACE, _appId, _appBase);\\n        appProxy = newAppProxyPinned(this, _appId, _initializePayload);\\n        // By calling setApp directly and not the internal functions, we make sure the params are checked\\n        // and it will only succeed if sender has permissions to set something to the namespace.\\n        if (_setDefault) {\\n            setApp(KERNEL_APP_ADDR_NAMESPACE, _appId, appProxy);\\n        }\\n    }\\n\\n    /**\\n    * @dev Set the resolving address of an app instance or base implementation\\n    * @notice Set the resolving address of `_appId` in namespace `_namespace` to `_app`\\n    * @param _namespace App namespace to use\\n    * @param _appId Identifier for app\\n    * @param _app Address of the app instance or base implementation\\n    * @return ID of app\\n    */\\n    function setApp(bytes32 _namespace, bytes32 _appId, address _app)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(_namespace, _appId))\\n    {\\n        _setApp(_namespace, _appId, _app);\\n    }\\n\\n    /**\\n    * @dev Set the default vault id for the escape hatch mechanism\\n    * @param _recoveryVaultAppId Identifier of the recovery vault app\\n    */\\n    function setRecoveryVaultAppId(bytes32 _recoveryVaultAppId)\\n        public\\n        auth(APP_MANAGER_ROLE, arr(KERNEL_APP_ADDR_NAMESPACE, _recoveryVaultAppId))\\n    {\\n        recoveryVaultAppId = _recoveryVaultAppId;\\n    }\\n\\n    // External access to default app id and namespace constants to mimic default getters for constants\\n    /* solium-disable function-order, mixedcase */\\n    function CORE_NAMESPACE() external pure returns (bytes32) { return KERNEL_CORE_NAMESPACE; }\\n    function APP_BASES_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_BASES_NAMESPACE; }\\n    function APP_ADDR_NAMESPACE() external pure returns (bytes32) { return KERNEL_APP_ADDR_NAMESPACE; }\\n    function KERNEL_APP_ID() external pure returns (bytes32) { return KERNEL_CORE_APP_ID; }\\n    function DEFAULT_ACL_APP_ID() external pure returns (bytes32) { return KERNEL_DEFAULT_ACL_APP_ID; }\\n    /* solium-enable function-order, mixedcase */\\n\\n    /**\\n    * @dev Get the address of an app instance or base implementation\\n    * @param _namespace App namespace to use\\n    * @param _appId Identifier for app\\n    * @return Address of the app\\n    */\\n    function getApp(bytes32 _namespace, bytes32 _appId) public view returns (address) {\\n        return apps[_namespace][_appId];\\n    }\\n\\n    /**\\n    * @dev Get the address of the recovery Vault instance (to recover funds)\\n    * @return Address of the Vault\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        return apps[KERNEL_APP_ADDR_NAMESPACE][recoveryVaultAppId];\\n    }\\n\\n    /**\\n    * @dev Get the installed ACL app\\n    * @return ACL app\\n    */\\n    function acl() public view returns (IACL) {\\n        return IACL(getApp(KERNEL_APP_ADDR_NAMESPACE, KERNEL_DEFAULT_ACL_APP_ID));\\n    }\\n\\n    /**\\n    * @dev Function called by apps to check ACL on kernel or to check permission status\\n    * @param _who Sender of the original call\\n    * @param _where Address of the app\\n    * @param _what Identifier for a group of actions in app\\n    * @param _how Extra data for ACL auth\\n    * @return Boolean indicating whether the ACL allows the role or not.\\n    *         Always returns false if the kernel hasn't been initialized yet.\\n    */\\n    function hasPermission(address _who, address _where, bytes32 _what, bytes _how) public view returns (bool) {\\n        IACL defaultAcl = acl();\\n        return address(defaultAcl) != address(0) && // Poor man's initialization check (saves gas)\\n            defaultAcl.hasPermission(_who, _where, _what, _how);\\n    }\\n\\n    function _setApp(bytes32 _namespace, bytes32 _appId, address _app) internal {\\n        require(isContract(_app), ERROR_APP_NOT_CONTRACT);\\n        apps[_namespace][_appId] = _app;\\n        emit SetApp(_namespace, _appId, _app);\\n    }\\n\\n    function _setAppIfNew(bytes32 _namespace, bytes32 _appId, address _app) internal {\\n        address app = getApp(_namespace, _appId);\\n        if (app != address(0)) {\\n            // The only way to set an app is if it passes the isContract check, so no need to check it again\\n            require(app == _app, ERROR_INVALID_APP_CHANGE);\\n        } else {\\n            _setApp(_namespace, _appId, _app);\\n        }\\n    }\\n\\n    modifier auth(bytes32 _role, uint256[] memory _params) {\\n        require(\\n            hasPermission(msg.sender, address(this), _role, ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)),\\n            ERROR_AUTH_FAILED\\n        );\\n        _;\\n    }\\n}\\n\",\"keccak256\":\"0x117b1e169c984a4ad9070d5d7784bf91f8b1b16d3e695694cde253181b5ade3e\"},\"contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x817f66cfc7bfafd19a4e6b1344850c5f7b72e39a1073fe862efebe608a07c0d3\"},\"contracts/kernel/KernelProxy.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\nimport \\\"./IKernel.sol\\\";\\nimport \\\"./KernelConstants.sol\\\";\\nimport \\\"./KernelStorage.sol\\\";\\nimport \\\"../common/DepositableDelegateProxy.sol\\\";\\nimport \\\"../common/IsContract.sol\\\";\\n\\n\\ncontract KernelProxy is IKernelEvents, KernelStorage, KernelAppIds, KernelNamespaceConstants, IsContract, DepositableDelegateProxy {\\n    /**\\n    * @dev KernelProxy is a proxy contract to a kernel implementation. The implementation\\n    *      can update the reference, which effectively upgrades the contract\\n    * @param _kernelImpl Address of the contract used as implementation for kernel\\n    */\\n    constructor(IKernel _kernelImpl) public {\\n        require(isContract(address(_kernelImpl)));\\n        apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID] = _kernelImpl;\\n\\n        // Note that emitting this event is important for verifying that a KernelProxy instance\\n        // was never upgraded to a malicious Kernel logic contract over its lifespan.\\n        // This starts the \\\"chain of trust\\\", that can be followed through later SetApp() events\\n        // emitted during kernel upgrades.\\n        emit SetApp(KERNEL_CORE_NAMESPACE, KERNEL_CORE_APP_ID, _kernelImpl);\\n    }\\n\\n    /**\\n     * @dev ERC897, whether it is a forwarding (1) or an upgradeable (2) proxy\\n     */\\n    function proxyType() public pure returns (uint256 proxyTypeId) {\\n        return UPGRADEABLE;\\n    }\\n\\n    /**\\n    * @dev ERC897, the address the proxy would delegate calls to\\n    */\\n    function implementation() public view returns (address) {\\n        return apps[KERNEL_CORE_NAMESPACE][KERNEL_CORE_APP_ID];\\n    }\\n}\\n\",\"keccak256\":\"0xb60dea1ebaf0e3e634b0782ef98fdd854b3de5bb639f56c2937ca34b676940ba\"},\"contracts/kernel/KernelStorage.sol\":{\"content\":\"pragma solidity 0.4.24;\\n\\n\\ncontract KernelStorage {\\n    // namespace => app id => address\\n    mapping (bytes32 => mapping (bytes32 => address)) public apps;\\n    bytes32 public recoveryVaultAppId;\\n}\\n\",\"keccak256\":\"0x682eac86f7a617281098c15cadbaeec72a50cbe49101861a1454519df1718a4c\"},\"contracts/lib/ens/AbstractENS.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/AbstractENS.sol\\n\\npragma solidity ^0.4.15;\\n\\n\\ninterface AbstractENS {\\n    function owner(bytes32 _node) public constant returns (address);\\n    function resolver(bytes32 _node) public constant returns (address);\\n    function ttl(bytes32 _node) public constant returns (uint64);\\n    function setOwner(bytes32 _node, address _owner) public;\\n    function setSubnodeOwner(bytes32 _node, bytes32 label, address _owner) public;\\n    function setResolver(bytes32 _node, address _resolver) public;\\n    function setTTL(bytes32 _node, uint64 _ttl) public;\\n\\n    // Logged when the owner of a node assigns a new owner to a subnode.\\n    event NewOwner(bytes32 indexed _node, bytes32 indexed _label, address _owner);\\n\\n    // Logged when the owner of a node transfers ownership to a new account.\\n    event Transfer(bytes32 indexed _node, address _owner);\\n\\n    // Logged when the resolver for a node changes.\\n    event NewResolver(bytes32 indexed _node, address _resolver);\\n\\n    // Logged when the TTL of a node changes\\n    event NewTTL(bytes32 indexed _node, uint64 _ttl);\\n}\\n\",\"keccak256\":\"0x8deaa274dfc550c8251576dfa0dde1e58933728ced575de4f5b12391fd358c95\"},\"contracts/lib/ens/ENS.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/ENS.sol\\n\\npragma solidity ^0.4.0;\\n\\n\\nimport \\\"./AbstractENS.sol\\\";\\n\\n/**\\n * The ENS registry contract.\\n */\\ncontract ENS is AbstractENS {\\n    struct Record {\\n        address owner;\\n        address resolver;\\n        uint64 ttl;\\n    }\\n\\n    mapping(bytes32=>Record) records;\\n\\n    // Permits modifications only by the owner of the specified node.\\n    modifier only_owner(bytes32 node) {\\n        if (records[node].owner != msg.sender) throw;\\n        _;\\n    }\\n\\n    /**\\n     * Constructs a new ENS registrar.\\n     */\\n    function ENS() public {\\n        records[0].owner = msg.sender;\\n    }\\n\\n    /**\\n     * Returns the address that owns the specified node.\\n     */\\n    function owner(bytes32 node) public constant returns (address) {\\n        return records[node].owner;\\n    }\\n\\n    /**\\n     * Returns the address of the resolver for the specified node.\\n     */\\n    function resolver(bytes32 node) public constant returns (address) {\\n        return records[node].resolver;\\n    }\\n\\n    /**\\n     * Returns the TTL of a node, and any records associated with it.\\n     */\\n    function ttl(bytes32 node) public constant returns (uint64) {\\n        return records[node].ttl;\\n    }\\n\\n    /**\\n     * Transfers ownership of a node to a new address. May only be called by the current\\n     * owner of the node.\\n     * @param node The node to transfer ownership of.\\n     * @param owner The address of the new owner.\\n     */\\n    function setOwner(bytes32 node, address owner) only_owner(node) public {\\n        Transfer(node, owner);\\n        records[node].owner = owner;\\n    }\\n\\n    /**\\n     * Transfers ownership of a subnode keccak256(node, label) to a new address. May only be\\n     * called by the owner of the parent node.\\n     * @param node The parent node.\\n     * @param label The hash of the label specifying the subnode.\\n     * @param owner The address of the new owner.\\n     */\\n    function setSubnodeOwner(bytes32 node, bytes32 label, address owner) only_owner(node) public {\\n        var subnode = keccak256(node, label);\\n        NewOwner(node, label, owner);\\n        records[subnode].owner = owner;\\n    }\\n\\n    /**\\n     * Sets the resolver address for the specified node.\\n     * @param node The node to update.\\n     * @param resolver The address of the resolver.\\n     */\\n    function setResolver(bytes32 node, address resolver) only_owner(node) public {\\n        NewResolver(node, resolver);\\n        records[node].resolver = resolver;\\n    }\\n\\n    /**\\n     * Sets the TTL for the specified node.\\n     * @param node The node to update.\\n     * @param ttl The TTL in seconds.\\n     */\\n    function setTTL(bytes32 node, uint64 ttl) only_owner(node) public {\\n        NewTTL(node, ttl);\\n        records[node].ttl = ttl;\\n    }\\n}\\n\",\"keccak256\":\"0x919b4beefbead7971bfe6a2a01025919d10091fd412b4e7ffaccc8661d7e2863\"},\"contracts/lib/ens/PublicResolver.sol\":{\"content\":\"// See https://github.com/ensdomains/ens/blob/7e377df83f/contracts/PublicResolver.sol\\n\\npragma solidity ^0.4.0;\\n\\nimport \\\"./AbstractENS.sol\\\";\\n\\n/**\\n * A simple resolver anyone can use; only allows the owner of a node to set its\\n * address.\\n */\\ncontract PublicResolver {\\n    bytes4 constant INTERFACE_META_ID = 0x01ffc9a7;\\n    bytes4 constant ADDR_INTERFACE_ID = 0x3b3b57de;\\n    bytes4 constant CONTENT_INTERFACE_ID = 0xd8389dc5;\\n    bytes4 constant NAME_INTERFACE_ID = 0x691f3431;\\n    bytes4 constant ABI_INTERFACE_ID = 0x2203ab56;\\n    bytes4 constant PUBKEY_INTERFACE_ID = 0xc8690233;\\n    bytes4 constant TEXT_INTERFACE_ID = 0x59d1d43c;\\n\\n    event AddrChanged(bytes32 indexed node, address a);\\n    event ContentChanged(bytes32 indexed node, bytes32 hash);\\n    event NameChanged(bytes32 indexed node, string name);\\n    event ABIChanged(bytes32 indexed node, uint256 indexed contentType);\\n    event PubkeyChanged(bytes32 indexed node, bytes32 x, bytes32 y);\\n    event TextChanged(bytes32 indexed node, string indexed indexedKey, string key);\\n\\n    struct PublicKey {\\n        bytes32 x;\\n        bytes32 y;\\n    }\\n\\n    struct Record {\\n        address addr;\\n        bytes32 content;\\n        string name;\\n        PublicKey pubkey;\\n        mapping(string=>string) text;\\n        mapping(uint256=>bytes) abis;\\n    }\\n\\n    AbstractENS ens;\\n    mapping(bytes32=>Record) records;\\n\\n    modifier only_owner(bytes32 node) {\\n        if (ens.owner(node) != msg.sender) throw;\\n        _;\\n    }\\n\\n    /**\\n     * Constructor.\\n     * @param ensAddr The ENS registrar contract.\\n     */\\n    function PublicResolver(AbstractENS ensAddr) public {\\n        ens = ensAddr;\\n    }\\n\\n    /**\\n     * Returns true if the resolver implements the interface specified by the provided hash.\\n     * @param interfaceID The ID of the interface to check for.\\n     * @return True if the contract implements the requested interface.\\n     */\\n    function supportsInterface(bytes4 interfaceID) public pure returns (bool) {\\n        return interfaceID == ADDR_INTERFACE_ID ||\\n               interfaceID == CONTENT_INTERFACE_ID ||\\n               interfaceID == NAME_INTERFACE_ID ||\\n               interfaceID == ABI_INTERFACE_ID ||\\n               interfaceID == PUBKEY_INTERFACE_ID ||\\n               interfaceID == TEXT_INTERFACE_ID ||\\n               interfaceID == INTERFACE_META_ID;\\n    }\\n\\n    /**\\n     * Returns the address associated with an ENS node.\\n     * @param node The ENS node to query.\\n     * @return The associated address.\\n     */\\n    function addr(bytes32 node) public constant returns (address ret) {\\n        ret = records[node].addr;\\n    }\\n\\n    /**\\n     * Sets the address associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param addr The address to set.\\n     */\\n    function setAddr(bytes32 node, address addr) only_owner(node) public {\\n        records[node].addr = addr;\\n        AddrChanged(node, addr);\\n    }\\n\\n    /**\\n     * Returns the content hash associated with an ENS node.\\n     * Note that this resource type is not standardized, and will likely change\\n     * in future to a resource type based on multihash.\\n     * @param node The ENS node to query.\\n     * @return The associated content hash.\\n     */\\n    function content(bytes32 node) public constant returns (bytes32 ret) {\\n        ret = records[node].content;\\n    }\\n\\n    /**\\n     * Sets the content hash associated with an ENS node.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * Note that this resource type is not standardized, and will likely change\\n     * in future to a resource type based on multihash.\\n     * @param node The node to update.\\n     * @param hash The content hash to set\\n     */\\n    function setContent(bytes32 node, bytes32 hash) only_owner(node) public {\\n        records[node].content = hash;\\n        ContentChanged(node, hash);\\n    }\\n\\n    /**\\n     * Returns the name associated with an ENS node, for reverse records.\\n     * Defined in EIP181.\\n     * @param node The ENS node to query.\\n     * @return The associated name.\\n     */\\n    function name(bytes32 node) public constant returns (string ret) {\\n        ret = records[node].name;\\n    }\\n\\n    /**\\n     * Sets the name associated with an ENS node, for reverse records.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param name The name to set.\\n     */\\n    function setName(bytes32 node, string name) only_owner(node) public {\\n        records[node].name = name;\\n        NameChanged(node, name);\\n    }\\n\\n    /**\\n     * Returns the ABI associated with an ENS node.\\n     * Defined in EIP205.\\n     * @param node The ENS node to query\\n     * @param contentTypes A bitwise OR of the ABI formats accepted by the caller.\\n     * @return contentType The content type of the return value\\n     * @return data The ABI data\\n     */\\n    function ABI(bytes32 node, uint256 contentTypes) public constant returns (uint256 contentType, bytes data) {\\n        var record = records[node];\\n        for(contentType = 1; contentType <= contentTypes; contentType <<= 1) {\\n            if ((contentType & contentTypes) != 0 && record.abis[contentType].length > 0) {\\n                data = record.abis[contentType];\\n                return;\\n            }\\n        }\\n        contentType = 0;\\n    }\\n\\n    /**\\n     * Sets the ABI associated with an ENS node.\\n     * Nodes may have one ABI of each content type. To remove an ABI, set it to\\n     * the empty string.\\n     * @param node The node to update.\\n     * @param contentType The content type of the ABI\\n     * @param data The ABI data.\\n     */\\n    function setABI(bytes32 node, uint256 contentType, bytes data) only_owner(node) public {\\n        // Content types must be powers of 2\\n        if (((contentType - 1) & contentType) != 0) throw;\\n\\n        records[node].abis[contentType] = data;\\n        ABIChanged(node, contentType);\\n    }\\n\\n    /**\\n     * Returns the SECP256k1 public key associated with an ENS node.\\n     * Defined in EIP 619.\\n     * @param node The ENS node to query\\n     * @return x, y the X and Y coordinates of the curve point for the public key.\\n     */\\n    function pubkey(bytes32 node) public constant returns (bytes32 x, bytes32 y) {\\n        return (records[node].pubkey.x, records[node].pubkey.y);\\n    }\\n\\n    /**\\n     * Sets the SECP256k1 public key associated with an ENS node.\\n     * @param node The ENS node to query\\n     * @param x the X coordinate of the curve point for the public key.\\n     * @param y the Y coordinate of the curve point for the public key.\\n     */\\n    function setPubkey(bytes32 node, bytes32 x, bytes32 y) only_owner(node) public {\\n        records[node].pubkey = PublicKey(x, y);\\n        PubkeyChanged(node, x, y);\\n    }\\n\\n    /**\\n     * Returns the text data associated with an ENS node and key.\\n     * @param node The ENS node to query.\\n     * @param key The text data key to query.\\n     * @return The associated text data.\\n     */\\n    function text(bytes32 node, string key) public constant returns (string ret) {\\n        ret = records[node].text[key];\\n    }\\n\\n    /**\\n     * Sets the text data associated with an ENS node and key.\\n     * May only be called by the owner of that node in the ENS registry.\\n     * @param node The node to update.\\n     * @param key The key to set.\\n     * @param value The text data value to set.\\n     */\\n    function setText(bytes32 node, string key, string value) only_owner(node) public {\\n        records[node].text[key] = value;\\n        TextChanged(node, key, key);\\n    }\\n}\\n\",\"keccak256\":\"0x8c538f586fdf66528c5c6e2e916c79f00762a2fba3ec0e7be78dc0e3fda4ac2c\"},\"contracts/lib/misc/ERCProxy.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ERCProxy {\\n    uint256 internal constant FORWARDING = 1;\\n    uint256 internal constant UPGRADEABLE = 2;\\n\\n    function proxyType() public pure returns (uint256 proxyTypeId);\\n    function implementation() public view returns (address codeAddr);\\n}\\n\",\"keccak256\":\"0xa976d3230857b541c68222d1dc50d8805c598897ae959f7b2d2ab5df35d85ae2\"},\"contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405160c080611ff083398101604090815281516020830151918301516060840151608085015160a09095015160008054600160a060020a0319908116600160a060020a038088169190911790925560018054821683891617905560028054821683871617905560038054909116828516179055939592939192918216151561012657604080517fe9358b010000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a0383169163e9358b019160248083019260209291908290030181600087803b1580156100f557600080fd5b505af1158015610109573d6000803e3d6000fd5b505050506040513d602081101561011f57600080fd5b5051610128565b815b60048054600160a060020a0392909216600160a060020a0319909216919091179055505050505050611e918061015f6000396000f30060806040526004361061005e5763ffffffff60e060020a60003504166339ca6e8681146100635780633cfb35aa146100945780633f15457f146100a957806348f7f2a3146100be578063aac57b3a146100d3578063caf1bb7c146100fa575b600080fd5b34801561006f57600080fd5b5061007861010f565b60408051600160a060020a039092168252519081900360200190f35b3480156100a057600080fd5b5061007861011e565b3480156100b557600080fd5b5061007861012d565b3480156100ca57600080fd5b5061007861013c565b3480156100df57600080fd5b50610078600435602435600160a060020a036044351661014b565b34801561010657600080fd5b50610078611c63565b600154600160a060020a031681565b600354600160a060020a031681565b600454600160a060020a031681565b600054600160a060020a031681565b6000806000806060600080600080610161611e46565b8c8c6040516020018083600019166000191681526020018260001916600019168152602001925050506040516020818303038152906040526040518082805190602001908083835b602083106101c85780518252601f1990920191602091820191016101a9565b51815160209384036101000a600019018019909216911617905260408051929094018290038220600480547f02571be30000000000000000000000000000000000000000000000000000000085529084018290529451909f50309650600160a060020a0390941694506302571be3936024808401945091929091908290030181600087803b15801561025957600080fd5b505af115801561026d573d6000803e3d6000fd5b505050506040513d602081101561028357600080fd5b5051600160a060020a0316146103eb5730600160a060020a0316600460009054906101000a9004600160a060020a0316600160a060020a03166302571be38f6040518263ffffffff1660e060020a028152600401808260001916600019168152602001915050602060405180830381600087803b15801561030357600080fd5b505af1158015610317573d6000803e3d6000fd5b505050506040513d602081101561032d57600080fd5b5051600160a060020a03161461034257600080fd5b600460009054906101000a9004600160a060020a0316600160a060020a03166306ab59238e8e306040518463ffffffff1660e060020a028152600401808460001916600019168152602001836000191660001916815260200182600160a060020a0316600160a060020a031681526020019350505050600060405180830381600087803b1580156103d257600080fd5b505af11580156103e6573d6000803e3d6000fd5b505050505b60008054604080517f216874440000000000000000000000000000000000000000000000000000000081523060048201529051600160a060020a03909216926321687444926024808401936020939083900390910190829087803b15801561045257600080fd5b505af1158015610466573d6000803e3d6000fd5b505050506040513d602081101561047c57600080fd5b5051604080517fde2873590000000000000000000000000000000000000000000000000000000081529051919950600160a060020a038a169163de287359916004808201926020929091908290030181600087803b1580156104dd57600080fd5b505af11580156104f1573d6000803e3d6000fd5b505050506040513d602081101561050757600080fd5b5051604080517f8ea8dc9d0000000000000000000000000000000000000000000000000000000081529051919850600160a060020a03808a169263be0384789230928d9290831691638ea8dc9d9160048083019260209291908290030181600087803b15801561057657600080fd5b505af115801561058a573d6000803e3d6000fd5b505050506040513d60208110156105a057600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201523060648201529051608480830192600092919082900301818387803b1580156105fb57600080fd5b505af115801561060f573d6000803e3d6000fd5b50506040805160008152606081018252600a60208083018281527f61706d2d656e73737562000000000000000000000000000000000000000000008486019081529451939c50600160a060020a038f16965063397edd4195508f949093909101918291908083835b602083106106965780518252601f199092019160209182019101610677565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083106106f95780518252601f1990920191602091820191016106da565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208282019790975281840196909652825180820384018152606090910192839052805190959294508493509185019190508083835b602083106107735780518252601f199092019160209182019101610754565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600360009054906101000a9004600160a060020a03168960006040518563ffffffff1660e060020a02815260040180856000191660001916815260200184600160a060020a0316600160a060020a031681526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b83811015610838578181015183820152602001610820565b50505050905090810190601f1680156108655780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b15801561088757600080fd5b505af115801561089b573d6000803e3d6000fd5b505050506040513d60208110156108b157600080fd5b5051604080518082018252600c8082527f61706d2d7265676973747279000000000000000000000000000000000000000060208381019182529351949950600160a060020a038d169463397edd41948f949391019182918083835b6020831061092b5780518252601f19909201916020918201910161090c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831061098e5780518252601f19909201916020918201910161096f565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208282019790975281840196909652825180820384018152606090910192839052805190959294508493509185019190508083835b60208310610a085780518252601f1990920191602091820191016109e9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600160009054906101000a9004600160a060020a03168960006040518563ffffffff1660e060020a02815260040180856000191660001916815260200184600160a060020a0316600160a060020a031681526020018060200183151515158152602001828103825284818151815260200191508051906020019080838360005b83811015610acd578181015183820152602001610ab5565b50505050905090810190601f168015610afa5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015610b1c57600080fd5b505af1158015610b30573d6000803e3d6000fd5b505050506040513d6020811015610b4657600080fd5b505160408051808201825260088082527f61706d2d7265706f000000000000000000000000000000000000000000000000602083810191825293519498508d949293929092019182918083835b60208310610bb25780518252601f199092019160209182019101610b93565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b60208310610c155780518252601f199092019160209182019101610bf6565b51815160209384036101000a6000190180199092169116179052604080519290940182900382208282019790975281840196909652825180820384018152606090910192839052805190959294508493509185019190508083835b60208310610c8f5780518252601f199092019160209182019101610c70565b51815160209384036101000a6000190180199092169116179052604080519290940182900382207fdb8a61d40000000000000000000000000000000000000000000000000000000083529351939850600160a060020a038e16955063ae5b25409450859363db8a61d493506004808401938290030181600087803b158015610d1657600080fd5b505af1158015610d2a573d6000803e3d6000fd5b505050506040513d6020811015610d4057600080fd5b50516002546040805160e060020a63ffffffff8616028152600481019390935260248301889052600160a060020a03909116604483015251606480830192600092919082900301818387803b158015610d9857600080fd5b505af1158015610dac573d6000803e3d6000fd5b505060408051600160a060020a038816815290518c93507f5dd941cb8701bb50205e5aef88c8532b8d6e75b7b65e2c458e9acdf261f0f29292509081900360200190a286600160a060020a031663be038478858788600160a060020a031663fef47e386040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610e3e57600080fd5b505af1158015610e52573d6000803e3d6000fd5b505050506040513d6020811015610e6857600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292841660248401526044830191909152918f1660648201529051608480830192600092919082900301818387803b158015610ec757600080fd5b505af1158015610edb573d6000803e3d6000fd5b5050505086600160a060020a031663be038478858788600160a060020a031663307482cf6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015610f2e57600080fd5b505af1158015610f42573d6000803e3d6000fd5b505050506040513d6020811015610f5857600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292841660248401526044830191909152918f1660648201529051608480830192600092919082900301818387803b158015610fb757600080fd5b505af1158015610fcb573d6000803e3d6000fd5b5050505086600160a060020a0316633d6ab68f6040518163ffffffff1660e060020a028152600401602060405180830381600087803b15801561100d57600080fd5b505af1158015611021573d6000803e3d6000fd5b505050506040513d602081101561103757600080fd5b5051604080517f0a8ed3db000000000000000000000000000000000000000000000000000000008152600160a060020a0387811660048301528a16602482018190526044820184905291519294509091630a8ed3db9160648082019260009290919082900301818387803b1580156110ae57600080fd5b505af11580156110c2573d6000803e3d6000fd5b505060048054604080517f5b0fc9c30000000000000000000000000000000000000000000000000000000081529283018e9052600160a060020a038a81166024850152905191169350635b0fc9c39250604480830192600092919082900301818387803b15801561113257600080fd5b505af1158015611146573d6000803e3d6000fd5b505060048054604080517fbe13f47c000000000000000000000000000000000000000000000000000000008152600160a060020a0392831693810193909352602483018e905251908916935063be13f47c9250604480830192600092919082900301818387803b1580156111b957600080fd5b505af11580156111cd573d6000803e3d6000fd5b5050505083600160a060020a031663c4d66de8866040518263ffffffff1660e060020a0281526004018082600160a060020a0316600160a060020a03168152602001915050600060405180830381600087803b15801561122c57600080fd5b505af1158015611240573d6000803e3d6000fd5b5050600183525050604080517f5e1f3fa80000000000000000000000000000000000000000000000000000000081529051600160a060020a03808a169263be038478923092899290831691635e1f3fa8916004808201926020929091908290030181600087803b1580156112b357600080fd5b505af11580156112c7573d6000803e3d6000fd5b505050506040513d60208110156112dd57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201523060648201529051608480830192600092919082900301818387803b15801561133857600080fd5b505af115801561134c573d6000803e3d6000fd5b5050505083600160a060020a03166332ab6af06040805190810160405280600c81526020017f61706d2d726567697374727900000000000000000000000000000000000000008152508d84600160009054906101000a9004600160a060020a03166113eb6040805190810160405280600881526020017f697066733a61706d000000000000000000000000000000000000000000000000815250611c72565b60405160e060020a63ffffffff8816028152600160a060020a03851660248201526004810190819060440185606080838360005b8381101561143757818101518382015260200161141f565b5050505090500184600160a060020a0316600160a060020a0316815260200180602001838103835288818151815260200191508051906020019080838360005b8381101561148f578181015183820152602001611477565b50505050905090810190601f1680156114bc5780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b838110156114ef5781810151838201526020016114d7565b50505050905090810190601f16801561151c5780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b15801561154057600080fd5b505af1158015611554573d6000803e3d6000fd5b505050506040513d602081101561156a57600080fd5b81019080805190602001909291905050505083600160a060020a03166332ab6af06040805190810160405280600a81526020017f61706d2d656e73737562000000000000000000000000000000000000000000008152508d84600360009054906101000a9004600160a060020a03166116176040805190810160405280600b81526020017f697066733a656e73737562000000000000000000000000000000000000000000815250611c72565b60405160e060020a63ffffffff8816028152600160a060020a03851660248201526004810190819060440185606080838360005b8381101561166357818101518382015260200161164b565b5050505090500184600160a060020a0316600160a060020a0316815260200180602001838103835288818151815260200191508051906020019080838360005b838110156116bb5781810151838201526020016116a3565b50505050905090810190601f1680156116e85780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561171b578181015183820152602001611703565b50505050905090810190601f1680156117485780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b15801561176c57600080fd5b505af1158015611780573d6000803e3d6000fd5b505050506040513d602081101561179657600080fd5b81019080805190602001909291905050505083600160a060020a03166332ab6af06040805190810160405280600881526020017f61706d2d7265706f0000000000000000000000000000000000000000000000008152508d84600260009054906101000a9004600160a060020a03166118436040805190810160405280600981526020017f697066733a7265706f0000000000000000000000000000000000000000000000815250611c72565b60405160e060020a63ffffffff8816028152600160a060020a03851660248201526004810190819060440185606080838360005b8381101561188f578181015183820152602001611877565b5050505090500184600160a060020a0316600160a060020a0316815260200180602001838103835288818151815260200191508051906020019080838360005b838110156118e75781810151838201526020016118cf565b50505050905090810190601f1680156119145780820380516001836020036101000a031916815260200191505b50838103825284518152845160209182019186019080838360005b8381101561194757818101518382015260200161192f565b50505050905090810190601f1680156119745780820380516001836020036101000a031916815260200191505b50975050505050505050602060405180830381600087803b15801561199857600080fd5b505af11580156119ac573d6000803e3d6000fd5b505050506040513d60208110156119c257600080fd5b506119d0905087858d611c75565b86600160a060020a031663afd925df8c8a8b600160a060020a0316638ea8dc9d6040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611a1f57600080fd5b505af1158015611a33573d6000803e3d6000fd5b505050506040513d6020811015611a4957600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201529051606480830192600092919082900301818387803b158015611a9e57600080fd5b505af1158015611ab2573d6000803e3d6000fd5b5050604080517f9d0effdb000000000000000000000000000000000000000000000000000000008152306004820152600160a060020a038b1660248201819052604482018790529151919350639d0effdb925060648082019260009290919082900301818387803b158015611b2657600080fd5b505af1158015611b3a573d6000803e3d6000fd5b5050604080517f0a8ed3db000000000000000000000000000000000000000000000000000000008152600160a060020a038f811660048301528b1660248201819052604482018790529151919350630a8ed3db925060648082019260009290919082900301818387803b158015611bb057600080fd5b505af1158015611bc4573d6000803e3d6000fd5b5050604080517fafd925df000000000000000000000000000000000000000000000000000000008152600160a060020a038f811660048301528b166024820181905260448201879052915191935063afd925df925060648082019260009290919082900301818387803b158015611c3a57600080fd5b505af1158015611c4e573d6000803e3d6000fd5b50959f9e505050505050505050505050505050565b600254600160a060020a031681565b90565b82600160a060020a0316630a8ed3db828485600160a060020a0316635e1f3fa86040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611cc457600080fd5b505af1158015611cd8573d6000803e3d6000fd5b505050506040513d6020811015611cee57600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201529051606480830192600092919082900301818387803b158015611d4357600080fd5b505af1158015611d57573d6000803e3d6000fd5b5050505082600160a060020a031663afd925df828485600160a060020a0316635e1f3fa86040518163ffffffff1660e060020a028152600401602060405180830381600087803b158015611daa57600080fd5b505af1158015611dbe573d6000803e3d6000fd5b505050506040513d6020811015611dd457600080fd5b50516040805160e060020a63ffffffff8716028152600160a060020a03948516600482015292909316602483015260448201529051606480830192600092919082900301818387803b158015611e2957600080fd5b505af1158015611e3d573d6000803e3d6000fd5b50505050505050565b60606040519081016040528060039060208202803883395091929150505600a165627a7a72305820322e97725b896bfb87fd14a0e738bc01dcad43568fff3e23671f98ac71a1af520029",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {
      "newAPM(bytes32,bytes32,address)": {
        "params": {
          "_label": "The subdomain label",
          "_root": "Manager for the new aragonPM DAO",
          "_tld": "The parent node of the controlled subdomain"
        },
        "return": "The new aragonPM's APMRegistry app"
      }
    }
  },
  "userdoc": {
    "methods": {
      "newAPM(bytes32,bytes32,address)": {
        "notice": "Create a new Aragon Package Manager (aragonPM) DAO, holding the `_label` subdomain from parent `_tld` and controlled by `_root`"
      }
    }
  }
}